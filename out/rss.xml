<rss version="2.0"><channel><title>Chronicles of a Tall Guy</title><link>http://tycho.ws/</link><description>Home of Tycho Andersen on the Internets</description><docs>http://www.rssboard.org/rss-specification</docs><item><title>How to reformat your cheap MP3 player on Linux</title><link>http://tycho.ws/pages/mee.html</link><description>&quot;&lt;p&gt;I own a MEElectronics MiniMee 2GB MP3 player; I&apos;ve had this player for quite a while now, and it works well with Kubuntu. The little player can only play MP3 files, so you&apos;ll have to convert everything to MP3 before you put it on the player. This is a minor inconvenience, but using the Transkode script for Amarok (available through the script manager), you can tell Amarok to do the * -&amp;gt; MP3 conversion on the fly, so you only have to press the \&quot;Transfer\&quot; button and Amarok will figure out the rest for you (which is nice).&lt;/p&gt;\n&lt;p&gt;However, inevitably something will go wrong. I&apos;m not sure where my issue was (with the MiniMee or with my USB Mass Storage drivers), but I unplugged the MiniMee without \&quot;Safely Remove\&quot;ing it. This corrupted the FAT(S), and hosed the disk. I could still write to it and read from it, but my previous files were unplayable and invisible (however the MiniMee knew they were there, because it still reported the storage as in use). That&apos;s really the reason I&apos;m posting this: to tell you how to fix that problem. This was targeted at people with MiniMees, but it should work for anyone who&apos;s got a corrupted mass storage device (and still needs the hardware to work with Windows, or in the MiniMee&apos;s case the firmware already on the chip).&lt;/p&gt;\n&lt;p&gt;First, you&apos;ll need mkfs (or more specifically, mkfs.vfat). This is available in the package &lt;a href=&apos;http://packages.ubuntu.com/hardy/dosfstools&apos;&gt;dosfstools&lt;/a&gt; which is probably already installed on Ubuntu, but is simply available with a&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo apt-get install dosfstools&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Next, you&apos;ll need to find out the device name of the drive with the corrupted FAT table. There are a million ways to do this, so I&apos;ll not go into detail. In my case it was simple since the device was still autodetected and would mount properly. In this example, I&apos;ll use /dev/sdc but you should replace that with your block device. You can probably make a good guess/sanity check as to what your drive letter will be, though, since sd* stands for SCSI device. This generally includes SATA drives, USB drives, etc. In my case, I have two SATA drives installed, so my drive letter checks out.&lt;/p&gt;\n&lt;p&gt;Anyways, once you know the drive letter, simply open a terminal and issue&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo mkfs.vfat -F 16 -I /dev/sdc&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The -F 16 option tells mkfs to make a FAT16 partition. The MiniMee seems to only work with FAT16 partitions (I tried FAT12 and FAT32 for grins and it would tell me how much data was on the partitions, but it wouldn&apos;t play any songs). Once you&apos;re done with the formatting (this should only take a few seconds on the MiniMee), you can re-transfer your songs and all should be happy.&lt;/p&gt;\n&lt;p&gt;Posted on 2008-07-19&lt;/p&gt;&quot;</description></item><item><title>People I know on the internet</title><link>http://tycho.ws/pages/friends.html</link><description>&quot;&lt;p&gt;If you&apos;re a friend of mine and you&apos;d like help starting a webpage, or your page isn&apos;t on this list, let me know.&lt;/p&gt;\n&lt;p&gt;My dad has an &lt;a href=&apos;http://dave.tycho.ws/Outdoors&apos;&gt;outdoors&lt;/a&gt; page detailing all of his experiences in the wild. Some of the photos you&apos;ll see there are the same ones you&apos;ll see in my photo sets, oddly enough.&lt;/p&gt;\n&lt;p&gt;My mom has started a recording studio in her home (it&apos;s a beautiful place, too). You can find details about their equipment/rates/customers etc. on their website: &lt;a href=&apos;http://riferecording.com&apos;&gt;riferecording.com&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&apos;http://nochair.net&apos;&gt;Tristan Ravitch&lt;/a&gt; is a graduate student at UW that I became good friends with.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&apos;http://pages.cs.wisc.edu/~adi/&apos;&gt;Aditya Thakur&lt;/a&gt; is another one of my close friends from graduate school, who is now at &lt;a href=&apos;http://www.cs.berkeley.edu/~athakur/&apos;&gt;cs.berkeley.edu&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&apos;http://accountabilityaccounting.com/&apos;&gt;Victoria Thomas&lt;/a&gt; is an accountant in the Madison area.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&apos;http://vmerch.wordpress.com/&apos;&gt;Valerie Merchant&lt;/a&gt; is a newly minted graphic designer.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&apos;http://net.doit.wisc.edu/~plonka/&apos;&gt;Dave Plonka&lt;/a&gt; hosted me when I came to UW-Madison to visit for the prospective graduate student weekend. We hit it off and he has been a good friend of mine since I moved to Madison.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&apos;http://web.cs.ucdavis.edu/~rubio/&apos;&gt;Cindy Rubio-Gonz\195\161lez&lt;/a&gt; is a professor at UC-Davis who I met while in graduate school.&lt;/p&gt;&quot;</description></item><item><title>Music</title><link>http://tycho.ws/music.html</link><description>&quot;&lt;p&gt;Here&apos;s a list of the bands I&apos;ve seen live. (N) indicates I&apos;ve been to see a band N times. Also, I tend not to list local shows here (or e.g. any one of the dozens of bands that play at larger festivals I&apos;ve attended such as Ozzfest). In general, these are the bands who are on the \&quot;&lt;a href=&apos;http://en.wikipedia.org/wiki/Kick_the_bucket&apos;&gt;bucket list&lt;/a&gt;\&quot;, so to speak.&lt;/p&gt;\n&lt;h1&gt;. Meshuggah (11)&lt;/h1&gt;\n&lt;h1&gt;. Adema&lt;/h1&gt;\n&lt;h1&gt;. Aerosmith&lt;/h1&gt;\n&lt;h1&gt;. After the Burial (2)&lt;/h1&gt;\n&lt;h1&gt;. Alice Cooper&lt;/h1&gt;\n&lt;h1&gt;. Animals as Leaders (6)&lt;/h1&gt;\n&lt;h1&gt;. Apocalyptica&lt;/h1&gt;\n&lt;h1&gt;. Between the Buried and Me&lt;/h1&gt;\n&lt;h1&gt;. Big Bad Voodoo Daddy&lt;/h1&gt;\n&lt;h1&gt;. Black Label Society&lt;/h1&gt;\n&lt;h1&gt;. Bush&lt;/h1&gt;\n&lt;h1&gt;. Cake&lt;/h1&gt;\n&lt;h1&gt;. Chevelle&lt;/h1&gt;\n&lt;h1&gt;. Christina Perri&lt;/h1&gt;\n&lt;h1&gt;. Clutch&lt;/h1&gt;\n&lt;h1&gt;. Cold&lt;/h1&gt;\n&lt;h1&gt;. Coldplay&lt;/h1&gt;\n&lt;h1&gt;. Cradle of Filth&lt;/h1&gt;\n&lt;h1&gt;. Creed&lt;/h1&gt;\n&lt;h1&gt;. Dave Matthews Band&lt;/h1&gt;\n&lt;h1&gt;. Deftones (3)&lt;/h1&gt;\n&lt;h1&gt;. Devin Townsend Project (2)&lt;/h1&gt;\n&lt;h1&gt;. Disturbed (3)&lt;/h1&gt;\n&lt;h1&gt;. Drowning Pool&lt;/h1&gt;\n&lt;h1&gt;. Eminem&lt;/h1&gt;\n&lt;h1&gt;. Evanescence (2)&lt;/h1&gt;\n&lt;h1&gt;. Flaw&lt;/h1&gt;\n&lt;h1&gt;. Foo Fighters&lt;/h1&gt;\n&lt;h1&gt;. GWAR&lt;/h1&gt;\n&lt;h1&gt;. Gnarls Barkley&lt;/h1&gt;\n&lt;h1&gt;. Godsmack (2)&lt;/h1&gt;\n&lt;h1&gt;. Gojira (4)&lt;/h1&gt;\n&lt;h1&gt;. Guns &apos;n Roses&lt;/h1&gt;\n&lt;h1&gt;. Hardcore Crayons&lt;/h1&gt;\n&lt;h1&gt;. Hed P.E.&lt;/h1&gt;\n&lt;h1&gt;. Hoobastank&lt;/h1&gt;\n&lt;h1&gt;. Hurt (6)&lt;/h1&gt;\n&lt;h1&gt;. Incubus&lt;/h1&gt;\n&lt;h1&gt;. Intronaut (3)&lt;/h1&gt;\n&lt;h1&gt;. Jack Johnson&lt;/h1&gt;\n&lt;h1&gt;. Kid Rock&lt;/h1&gt;\n&lt;h1&gt;. Killswitch Engage&lt;/h1&gt;\n&lt;h1&gt;. Ko\208\175n (5)&lt;/h1&gt;\n&lt;h1&gt;. Lamb of God (5)&lt;/h1&gt;\n&lt;h1&gt;. Linkin Park&lt;/h1&gt;\n&lt;h1&gt;. Marilyn Manson (2)&lt;/h1&gt;\n&lt;h1&gt;. Mason Jennings&lt;/h1&gt;\n&lt;h1&gt;. MGMT&lt;/h1&gt;\n&lt;h1&gt;. Misfits&lt;/h1&gt;\n&lt;h1&gt;. M\195\182tley Cr\195\188e&lt;/h1&gt;\n&lt;h1&gt;. Motograter&lt;/h1&gt;\n&lt;h1&gt;. Mudvayne (2)&lt;/h1&gt;\n&lt;h1&gt;. Mumford and Sons&lt;/h1&gt;\n&lt;h1&gt;. Muse&lt;/h1&gt;\n&lt;h1&gt;. MushroomHead&lt;/h1&gt;\n&lt;h1&gt;. Nile&lt;/h1&gt;\n&lt;h1&gt;. Nine Inch Nails&lt;/h1&gt;\n&lt;h1&gt;. Opeth&lt;/h1&gt;\n&lt;h1&gt;. Ozzy Osbourne (3)&lt;/h1&gt;\n&lt;h1&gt;. P.O.D.&lt;/h1&gt;\n&lt;h1&gt;. Passenger&lt;/h1&gt;\n&lt;h1&gt;. Pearl Jam&lt;/h1&gt;\n&lt;h1&gt;. Periphery&lt;/h1&gt;\n&lt;h1&gt;. Primus (4)&lt;/h1&gt;\n&lt;h1&gt;. Puddle of Mudd&lt;/h1&gt;\n&lt;h1&gt;. Reaping Asmodeia (lots)&lt;/h1&gt;\n&lt;h1&gt;. Red Hot Chilli Peppers&lt;/h1&gt;\n&lt;h1&gt;. Rihanna&lt;/h1&gt;\n&lt;h1&gt;. Seether&lt;/h1&gt;\n&lt;h1&gt;. Seven Mary Three&lt;/h1&gt;\n&lt;h1&gt;. Sevendust&lt;/h1&gt;\n&lt;h1&gt;. Shawn James&lt;/h1&gt;\n&lt;h1&gt;. Shinedown&lt;/h1&gt;\n&lt;h1&gt;. Slayer&lt;/h1&gt;\n&lt;h1&gt;. Slipknot (3)&lt;/h1&gt;\n&lt;h1&gt;. Staind&lt;/h1&gt;\n&lt;h1&gt;. Stone Sour&lt;/h1&gt;\n&lt;h1&gt;. Stone Temple Pilots&lt;/h1&gt;\n&lt;h1&gt;. System of a Down&lt;/h1&gt;\n&lt;h1&gt;. Tantric&lt;/h1&gt;\n&lt;h1&gt;. Tigran Hamasyan&lt;/h1&gt;\n&lt;h1&gt;. The Rolling Stones&lt;/h1&gt;\n&lt;h1&gt;. Three Days Grace (2)&lt;/h1&gt;\n&lt;h1&gt;. Three Doors Down&lt;/h1&gt;\n&lt;h1&gt;. Train&lt;/h1&gt;\n&lt;h1&gt;. Trampled by Turtles&lt;/h1&gt;\n&lt;h1&gt;. Veil of Maya (2)&lt;/h1&gt;\n&lt;h1&gt;. Vulfpeck&lt;/h1&gt;&quot;</description></item><item><title>Miscellaneous</title><link>http://tycho.ws/misc.html</link><description>&quot;&lt;h3&gt;Contact&lt;/h3&gt;\n&lt;p&gt;I can be reached at tycho@ this domain. Disclaimer: all of my e-mail goes through Google&apos;s mail servers.&lt;/p&gt;\n&lt;h3&gt;Play&lt;/h3&gt;\n&lt;p&gt;I live in &lt;a href=&apos;https://en.wikipedia.org/wiki/Denver,_Colorado&apos;&gt;Denver, Colorado, USA&lt;/a&gt;, where I work out of my tiny downtown apartment. I will not relocate to the Bay Area (or anywhere else) to work for your company. I &lt;a href=&apos;https://www.strava.com/athletes/13638050&apos;&gt;ride bikes&lt;/a&gt;. I hack on &lt;a href=&apos;https://github.com/tych0&apos;&gt;free software&lt;/a&gt;.&lt;/p&gt;&quot;</description></item><item><title>WTF, Linux?</title><link>http://tycho.ws/blog/2019/wtf-linux.html</link><description>&quot;&lt;p&gt;Sometimes, weird things happen on your system.&lt;/p&gt;\n&lt;p&gt;The first thing to look at on any given system is the output of top:&lt;/p&gt;\n&lt;p&gt;``` top - 16:34:38 up 2 days, 1:46, 19 users, load average: 0.74, 0.45, 0.39 Tasks: 290 total, 1 running, 288 sleeping, 0 stopped, 1 zombie %Cpu(s): 2.5 us, 5.2 sy, 0.0 ni, 91.8 id, 0.0 wa, 0.0 hi, 0.5 si, 0.0 st MiB Mem : 15785.9 total, 1554.9 free, 3441.4 used, 10789.5 buff/cache MiB Swap: 976.0 total, 976.0 free, 0.0 used. 11682.1 avail Mem&lt;/p&gt;\n&lt;p&gt;PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 10856 tycho 20 0 1575288 66744 15424 S 5.9 0.4 25:42.61 hangups 4046 root 20 0 311044 48760 27076 S 4.0 0.3 30:22.79 Xorg 12812 tycho 20 0 1127988 316872 152760 S 3.0 2.0 13:29.05 chrome 12852 tycho 20 0 370588 103756 61092 S 2.0 0.6 6:22.84 chrome 30949 tycho 20 0 51804 18328 11976 S 2.0 0.1 0:00.81 urxvt 31013 tycho 20 0 12268 4316 3428 R 2.0 0.0 0:01.20 top 642 root -51 0 0 0 0 S 1.0 0.0 8:55.92 irq/134-iwlwifi 26517 tycho 20 0 603672 147324 78360 S 1.0 0.9 0:09.02 chrome 1 root 20 0 166772 11124 7692 S 0.0 0.1 0:07.28 systemd 2 root 20 0 0 0 0 S 0.0 0.0 0:00.09 kthreadd 3 root 0 -20 0 0 0 I 0.0 0.0 0:00.00 rcu&lt;em&gt;gp 4 root 0 -20 0 0 0 I 0.0 0.0 0:00.00 rcu&lt;/em&gt;par&lt;em&gt;gp 6 root 0 -20 0 0 0 I 0.0 0.0 0:00.00 kworker/0:0H-events&lt;/em&gt;highpri 8 root 0 -20 0 0 0 I 0.0 0.0 0:00.00 mm&lt;em&gt;percpu&lt;/em&gt;wq 9 root 20 0 0 0 0 S 0.0 0.0 0:03.80 ksoftirqd/0 10 root 20 0 0 0 0 I 0.0 0.0 3:36.11 rcu&lt;em&gt;sched 11 root rt 0 0 0 0 S 0.0 0.0 0:00.70 migration/0 12 root -51 0 0 0 0 S 0.0 0.0 0:00.00 idle&lt;/em&gt;inject/0 ```&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;top&lt;/code&gt; allows you to sort by what&apos;s using lots of CPU, memory, etc. This machine is not loaded at all, according to the load average:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;load average: 0.74, 0.45, 0.39&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;The first number is the load average in the last minute, the second number is the load average over the last five minutes, and the third number is the load average over the last 15 minutes. Note that load averages are a multiple of cores, so a machine with four cores and a load average of 4 is totally CPU bound. Additionally, the load average is really the number of processes that \&quot;wanted\&quot; to run, not the number of processes that were actually running. So a machine with four cores and a load average of 16 is 4x oversubscribed on CPU.&lt;/p&gt;\n&lt;p&gt;But the most magical line in top is the per-cpu state line:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;%Cpu(s):  2.5 us,  5.2 sy,  0.0 ni, 91.8 id,  0.0 wa,  0.0 hi,  0.5 si,  0.0 st&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Often, a careful reading of this line can tell you what is going on with a system. The numbers here are percentages and similar to load averages in that percentages &amp;gt; 100 are still sensible. But the most interesting thing are the suffixes here. From the top man page:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;us, user    : time running un-niced user processes sy, system  : time running kernel processes ni, nice    : time running niced user processes id, idle    : time spent in the kernel idle handler wa, IO-wait : time waiting for I/O completion hi : time spent servicing hardware interrupts si : time spent servicing software interrupts st : time stolen from this vm by the hypervisor&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Mostly, you&apos;ll see high numbers in the &lt;code&gt;us&lt;/code&gt;, &lt;code&gt;sy&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;, and &lt;code&gt;wa&lt;/code&gt; columns. Large values in &lt;code&gt;us&lt;/code&gt;, &lt;code&gt;ni&lt;/code&gt;, means that the workload is CPU bound. These will generally correlate with non-zero values in &lt;code&gt;sy&lt;/code&gt;, since &lt;code&gt;sy&lt;/code&gt; indicates time stuff was running in the kernel. Large values in &lt;code&gt;sy&lt;/code&gt; relative to &lt;code&gt;us&lt;/code&gt; almost always indicate a problem&lt;/p&gt;&quot;</description><category>linux</category><category>debugging</category><category>strace</category></item><item><title>stacker: build OCI images without host privilege</title><link>http://tycho.ws/blog/2018/stacker.html</link><description>&quot;&lt;p&gt;Ahoy! Recently, I&apos;ve been working on a tool called &lt;a href=&apos;http://github.com/anuvu/stacker&apos;&gt;stacker&lt;/a&gt;, which allows unprivileged users to build OCI images. The images that are generated are generated without uid shifting, so they look like any other OCI image that was generated by Docker or some other mechanism, while not requiring root (worth noting that this is what James Bottomley has described as his motivation for writing &lt;a href=&apos;https://lkml.org/lkml/2017/2/20/653&apos;&gt;shiftfs&lt;/a&gt;).&lt;/p&gt;\n&lt;p&gt;Some base setup is required in order to make this happen, though. First, you can follow &lt;a href=&apos;https://github.com/anuvu/stacker#install&apos;&gt;stacker&apos;s install guide&lt;/a&gt; to build and install it.&lt;/p&gt;\n&lt;p&gt;Next, as with any user namespaces setup, stacker needs a 65k uid delegation. On my ubuntu VM with the ubuntu user, this looks like,&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ grep ubuntu /etc/subuid\nubuntu:165536:65536\n$ grep ubuntu /etc/subgid\nubuntu:165536:65536&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that these can be any 65k range of subuids, stacker will use whatever you give the user you run it as.&lt;/p&gt;\n&lt;p&gt;Finally, stacker also needs a btrfs filesystem. Stacker was designed to build a large number of varying images from a single base image, and uses btrfs to avoid doing a large amount of i/o (and compression/decompression), undiffing filesystems back to their original state. For the purposes of this blog post, we can just use a loopback mounted btrfs filesystem. A slightly modified excerpt from the stacker test suite:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;# btrfs setup\nsudo truncate -s 100G btrfs.loop\nsudo mkfs.btrfs btrfs.loop\nsudo mkdir -p roots\n# allow for unprivileged subvolume deletion; use a sane flushing strategy\nsudo mount -o user_subvol_rm_allowed,flushoncommit,loop .stacker/btrfs.loop roots\n# now make sure ubuntu can actually do stuff with this filesystem\nsudo chown -R ubuntu:ubuntu roots&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And with that, we can actually run stacker and build an image:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;stacker build -f ./stacker.yaml&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;What goes in &lt;code&gt;stacker.yaml&lt;/code&gt; you ask? Consider the example from stacker&apos;s readme:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;centos:\n\tfrom:\n\t\ttype: tar\n\t\turl: http://example.com/centos.tar.gz\n\tenvironment:\n\t\thttp_proxy: http://example.com:8080\n\t\thttps_proxy: https://example.com:8080\n\tlabels:\n\t\tfoo: bar\n\t\tbar: baz\nboot:\n\tfrom:\n\t\ttype: built\n\t\ttag: centos\n\trun: |\n\t\tyum install openssh-server\n\t\techo meshuggah rocks\nweb:\n\tfrom:\n\t\ttype: built\n\t\ttag: centos\n\timport: ./lighttp.cfg\n\trun: |\n\t\tyum install lighttpd\n\t\tcp /stacker/lighttp.cfg /etc/lighttpd/lighttp.cfg\n\tentrypoint: lighthttpd\n\tvolumes:\n\t\t- /data/db\n\tworking_dir: /var/lib/www&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The top level describes the name of a tag in the OCI image to be built, in this case there will be three tags at the end: &lt;code&gt;centos&lt;/code&gt;, &lt;code&gt;boot&lt;/code&gt;, and &lt;code&gt;web&lt;/code&gt; (notably, this example is quite contrived :). Underneath those, there are the following keys:&lt;/p&gt;\n&lt;h1&gt;. &lt;code&gt;from&lt;/code&gt;: this describes the base image that stacker will start from. You can&lt;/h1&gt;\n&lt;p&gt;either start from some other image in the same stackerfile, a Docker image, or a tarball.&lt;/p&gt;\n&lt;h1&gt;. &lt;code&gt;import&lt;/code&gt;: A set of files to download or copy into the container. Stacker&lt;/h1&gt;\n&lt;p&gt;will put these files at &lt;code&gt;/stacker&lt;/code&gt;, which will be automatically cleaned up after the commands in the &lt;code&gt;run&lt;/code&gt; section are run and the image is finalized.&lt;/p&gt;\n&lt;h1&gt;. &lt;code&gt;run&lt;/code&gt;: This is the set of commands to run in order to build the image; they&lt;/h1&gt;\n&lt;p&gt;are run in a user namespaced container, with the set of files imported available in &lt;code&gt;/stacker&lt;/code&gt;.&lt;/p&gt;\n&lt;h1&gt;. &lt;code&gt;environment&lt;/code&gt;, &lt;code&gt;labels&lt;/code&gt;, &lt;code&gt;working_dir&lt;/code&gt;, &lt;code&gt;volumes&lt;/code&gt;: these all correspond&lt;/h1&gt;\n&lt;p&gt;exactly to the similarly named bits in the &lt;a href=&apos;https://github.com/opencontainers/image-spec/blob/master/config.md#properties&apos;&gt;OCI image config spec&lt;/a&gt;, and are available for users to pass things through to the runtime environment of the image.&lt;/p&gt;\n&lt;p&gt;That&apos;s a bit about stacker. Hopefully some more details about the internals will appear at some point :). Happy hacking!&lt;/p&gt;&quot;</description><category>linux</category><category>OCI</category><category>containers</category><category>golang</category><pubDate>Sun, 28 Jan 2018 00:00:00 UTC</pubDate></item><item><title>Just how expensive is slub_deug=p?</title><link>http://tycho.ws/blog/2017/slub_debug.html</link><description>&quot;&lt;p&gt;Recently, I became interested in a debugging option in the Linux kernel&lt;/p&gt;\n&lt;h3&gt;slub_debug=p&lt;/h3&gt;\n&lt;p&gt;``` Average Half load -j 2 Run (std deviation): Elapsed Time 44.586 (1.67125) User Time 73.874 (2.51294) System Time 7.756 (0.741741) Percent CPU 182.4 (0.547723) Context Switches 13880.8 (157.161) Sleeps 15745.2 (24.3146)&lt;/p&gt;\n&lt;p&gt;Average Optimal load -j 4 Run (std deviation): Elapsed Time 32.702 (0.400087) User Time 89.22 (16.3062) System Time 8.945 (1.37014) Percent CPU 266.4 (88.5729) Context Switches 15701 (1929.57) Sleeps 15722.2 (78.1875) ```&lt;/p&gt;\n&lt;h3&gt;without slub_debug=p&lt;/h3&gt;\n&lt;p&gt;``` Average Half load -j 2 Run (std deviation): Elapsed Time 40.614 (0.232873) User Time 69.978 (0.503061) System Time 5.09 (0.182209) Percent CPU 184.4 (0.547723) Context Switches 13596 (121.501) Sleeps 15740.4 (46.4629)&lt;/p&gt;\n&lt;p&gt;Average Optimal load -j 4 Run (std deviation): Elapsed Time 30.622 (0.171523) User Time 86.233 (17.1381) System Time 5.874 (0.853557) Percent CPU 270.1 (90.3431) Context Switches 15370.3 (1875.97) Sleeps 15777.4 (74.43) ```&lt;/p&gt;&quot;</description><category>linux</category><category>kernel</category><category>security</category><pubDate>Fri, 31 Mar 2017 00:00:00 UTC</pubDate></item><item><title>pw, a stateless password generation tool</title><link>http://tycho.ws/blog/2017/pw.html</link><description>&quot;&lt;p&gt;Ahoy! Recently, I have been working on a new stateless password generation tool, primarily to learn the language rust. The idea was to build replacement for &lt;a href=&apos;https://github.com/tych0/password&apos;&gt;password&lt;/a&gt;, which, while I use daily, could use a few extra features.&lt;/p&gt;\n&lt;p&gt;While I could elaborate on &lt;code&gt;pw&lt;/code&gt;&apos;s features, I think it&apos;s best to just copy the text from &lt;code&gt;pw&lt;/code&gt;&apos;s readme:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;pw&lt;/code&gt; uses &lt;code&gt;pbkdf2&lt;/code&gt; with &lt;code&gt;sha512&lt;/code&gt; to stretch your password, with the supplied entity as the salt. The result is encoded in base58, meaning that each symbol in the password has ~5.86 of entropy. By default, pw generates passwords of length 20, so there are ~117 bits of entropy per (default) password. By comparison, &lt;a href=&apos;https://xkcd.com/936/&apos;&gt;\&quot;correct horse battery staple\&quot;&lt;/a&gt; is only 44.&lt;/p&gt;\n&lt;h4&gt;Password Rotation&lt;/h4&gt;\n&lt;p&gt;Changing passwords, memorably. &lt;code&gt;pw&lt;/code&gt; offers several features for changing the generated password for a given salt and user secret combination. For example, some organizations require users to change their password every 90 days. This is security theater, but nonetheless, users must cooperate. Using a standard password generator, users could append a \&quot;2\&quot; and a \&quot;3\&quot; (\&quot;4\&quot;...) to their password ad infinitum; the problem with this is that it makes some part of the plaintext input known. &lt;code&gt;pw&lt;/code&gt; uses a novel method of changing the number of iterations for &lt;code&gt;pbkdf2&lt;/code&gt; based on such inputs. &lt;code&gt;--otp&lt;/code&gt; can be directly used to change the number of iterations and thus the generated password. &lt;code&gt;--period&lt;/code&gt; and &lt;code&gt;--date&lt;/code&gt; can be used together to work around organizations who e.g. require you to change your password every 90 days. &lt;code&gt;--period&lt;/code&gt; alone calculates the password based on the current date, while &lt;code&gt;--date&lt;/code&gt; allows you to pass an arbitrary date for which to calculate password.&lt;/p&gt;\n&lt;h4&gt;Adding Special Characters&lt;/h4&gt;\n&lt;p&gt;By default the base58 encoding includes only alphanumeric characters. Some organizations require special characters in their passwords. Users can add arbitrary special characters by supplying an argument to &lt;code&gt;--special&lt;/code&gt;. By default, &lt;code&gt;--special&lt;/code&gt; includes 25 typically allowed special characters.&lt;/p&gt;\n&lt;h4&gt;Salt Recommendations&lt;/h4&gt;\n&lt;p&gt;The salt is of particular importance to generated passwords. A typical suggestion is to use the domain of the entity that the password is for, but the problem is that an attacker who steals usbank.com&apos;s password database may just generate a rainbow table for usbank.com. So, some personalized version of the salt is recommended. For example, I might choose tycho.usbank.com. An additional feature (discussed in TODO) would be a global offset for the algorithm, so people could choose e.g. to not use the default offset of 0, but something else for all of their passwords.&lt;/p&gt;\n&lt;h4&gt;Usage&lt;/h4&gt;\n&lt;p&gt;&lt;code&gt;pw&lt;/code&gt; has support for storing a password in the OS native keyring, via &lt;code&gt;--{get,set,delete}-keyring-password&lt;/code&gt;, so that users don&apos;t have to type in their password each invocation.&lt;/p&gt;\n&lt;p&gt;There is also X11 clipboard support on Linux via &lt;code&gt;xclip&lt;/code&gt;, so users can pass &lt;code&gt;--clipboard&lt;/code&gt; to pw, and it will automatically copy the generated password to the clipboard.&lt;/p&gt;\n&lt;p&gt;Finally, worth noting is that &lt;code&gt;pw&lt;/code&gt; has support for a configuration file, allowing for a few other features, which can be configured via &lt;code&gt;--{get,set,edit,delete}-keyring-config&lt;/code&gt;. For example, users can store OTP offsets, special character sets, or even pre-shared key material (config key &lt;code&gt;preshared&lt;/code&gt;, a string) to use for generating particular passwords. Currently this config file must be stored in the keyring, so it is not exposed to unencrypted access. Of course, this is not stateless, and pw can function entirely without this configuration, but it may be useful to some.&lt;/p&gt;&quot;</description><category>passwords</category><category>tools</category><category>rust</category><pubDate>Sat, 16 Dec 2017 00:00:00 UTC</pubDate></item><item><title>Linux Piter</title><link>http://tycho.ws/blog/2017/piter.html</link><description>&quot;&lt;p&gt;Last weekend I attended the &lt;a href=&apos;http://linuxpiter.com&apos;&gt;Linux Piter&lt;/a&gt; conference for the second year in a row. I have thoroughly enjoyed this conference both for the caliber of speaker (Cristoph Hellwig and Lennart Poettering this year) but more for the caliber of the audience. I receive interesting technical questions, suggestions, and insights about my talks when I present there. I would liken it to a conference like linux.conf.au: a less corporate/more community focused audience which is highly technical.&lt;/p&gt;\n&lt;p&gt;Getting to Russia can be complicated for most, but speaking here is interesting in addition to the technical aspects: the program committee puts on a \&quot;cultural day\&quot; the day after the conference, showing visitors around Saint Petersburg, which is a much nicer speaker gift than a box of chocolates or another USB charger :)&lt;/p&gt;&quot;</description><category>conference</category><category>linux</category><pubDate>Wed,  8 Nov 2017 00:00:00 UTC</pubDate></item><item><title>Mounting your home directory in LXD</title><link>http://tycho.ws/blog/2016/12/uidmap.html</link><description>&quot;&lt;p&gt;As of LXD stable 2.0.8 and feature release 2.6, LXD has support for various UID and GID map related manipulaions. A common question is: \&quot;How do I bind-mount my home directory into a container?\&quot; and before the answer was \&quot;well, it&apos;s complicated but you can do it; it&apos;s slightly less complicated if you do it in privleged containers\&quot;. However, with this feature, now you can do it very easily in unprivileged containers.&lt;/p&gt;\n&lt;p&gt;First, find out your uid on the host:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ id\nuid=1000(tycho) gid=1000(tycho) groups=1000(tycho),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),112(lpadmin),124(sambashare),129(libvirtd),149(lxd),150(sbuild)&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;On standard Ubuntu hosts, the uid of the first user is 1000. Now, we need to allow LXD to remap this id; you&apos;ll need an additional entry for root to do this:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ echo &apos;root:1000:1&apos; | sudo tee -a /etc/subuid /etc/subgid&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now, create a container, and set the idmap up to map both uid and gid 1000 to uid and gid 1000 inside the container.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ lxc init ubuntu-daily:z zesty\nCreating zesty\n$ lxc config set zesty raw.idmap &apos;both 1000 1000&apos;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Finally, set up your home directory to be mounted in the container:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ lxc config device add zesty homedir disk source=/home/tycho path=/home/ubuntu&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And leave an insightful message for users of the container:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ echo &apos;meshuggah rocks&apos; &amp;gt;&amp;gt; message&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Finally, start your container and read the message:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ lxc start zesty\n$ lxc exec zesty cat /home/ubuntu/message\nmeshuggah rocks&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And enjoy the insighed offered to you by your home directory :)&lt;/p&gt;&quot;</description><category>containers</category><category>lxd</category><pubDate>Wed,  7 Dec 2016 00:00:00 UTC</pubDate></item><item><title>LXD networking: lxdbr0 explained</title><link>http://tycho.ws/blog/2016/04/lxdbr0.html</link><description>&quot;&lt;p&gt;Recently, LXD stopped depending on lxc, and thus moved to using its own bridge, called &lt;code&gt;lxdbr0&lt;/code&gt;. &lt;code&gt;lxdbr0&lt;/code&gt; behaves significantly differently than &lt;code&gt;lxcbr0&lt;/code&gt;: it is ipv6 link local only by default (i.e. there is no ipv4 or ipv6 subnet configured by default), and only HTTP traffic is proxied over the network. This means that e.g. you can&apos;t SSH to your LXD containers with the default configuration of lxdbr0.&lt;/p&gt;\n&lt;p&gt;The motivation for this change mostly to avoid picking subnets for users, because this can cause breakage, and have users pick their own subnets. Previously, the script that set up &lt;code&gt;lxcbr0&lt;/code&gt; looked around on the host&apos;s network, and picked the first 10.0.*.1 address for the bridge that was available. Of course, in some cases (e.g. networks which weren&apos;t visible at the time of bridge creation) this can break routing for users&apos; networks.&lt;/p&gt;\n&lt;p&gt;So, if you want to have parity with &lt;code&gt;lxcbr0&lt;/code&gt;, you&apos;ll need to configure the bridge yourself. There are a few ways to do this. For a step by step walkthrough of just configuring the bridge, simply do:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo dpkg-reconfigure -p medium lxd&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And answer the questions however you like. If you&apos;ve never configured LXD at all (and e.g. want to use a fancy filesystem like ZFS), try:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo lxd init&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Which will configure all of LXD (both the filesystem and &lt;code&gt;lxdbr0&lt;/code&gt;). Finally, you can edit the file &lt;code&gt;/etc/default/lxd-bridge&lt;/code&gt; and then do a:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo service lxd-bridge stop &amp;&amp; sudo service lxd restart&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For feature parity with &lt;code&gt;lxcbr0&lt;/code&gt;, you can use something like the following (note the 10.0.4.*, so as not to conflict with &lt;code&gt;lxcbr0&lt;/code&gt;):&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;# Whether to setup a new bridge or use an existing one\nUSE_LXD_BRIDGE=\&quot;true\&quot;\n\n# Bridge name\n# This is still used even if USE_LXD_BRIDGE is set to false\n# set to an empty value to fully disable\nLXD_BRIDGE=\&quot;lxdbr0\&quot;\n\n# Path to an extra dnsmasq configuration file\nLXD_CONFILE=\&quot;\&quot;\n\n# DNS domain for the bridge\nLXD_DOMAIN=\&quot;lxd\&quot;\n\n# IPv4\n## IPv4 address (e.g. 10.0.4.1)\nLXD_IPV4_ADDR=\&quot;10.0.4.1\&quot;\n\n## IPv4 netmask (e.g. 255.255.255.0)\nLXD_IPV4_NETMASK=\&quot;255.255.255.0\&quot;\n\n## IPv4 network (e.g. 10.0.4.0/24)\nLXD_IPV4_NETWORK=\&quot;10.0.4.1/24\&quot;\n\n## IPv4 DHCP range (e.g. 10.0.4.2,10.0.4.254)\nLXD_IPV4_DHCP_RANGE=\&quot;10.0.4.2,10.0.4.254\&quot;\n\n## IPv4 DHCP number of hosts (e.g. 250)\nLXD_IPV4_DHCP_MAX=\&quot;253\&quot;\n\n## NAT IPv4 traffic\nLXD_IPV4_NAT=\&quot;true\&quot;\n\n# IPv6\n## IPv6 address (e.g. 2001:470:b368:4242::1)\nLXD_IPV6_ADDR=\&quot;\&quot;\n\n## IPv6 CIDR mask (e.g. 64)\nLXD_IPV6_MASK=\&quot;\&quot;\n\n## IPv6 network (e.g. 2001:470:b368:4242::/64)\nLXD_IPV6_NETWORK=\&quot;\&quot;\n\n## NAT IPv6 traffic\nLXD_IPV6_NAT=\&quot;false\&quot;\n\n# Run a minimal HTTP PROXY server\nLXD_IPV6_PROXY=\&quot;false\&quot;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And that&apos;s it! That&apos;s all you need to do to configure &lt;code&gt;lxdbr0&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Sometimes, though, you don&apos;t really want your containers to live on a separate network than the host because you want to ssh to them directly or something. There are a few ways to accomplish this, the simplest is with macvlan:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;lxc profile device set default eth0 parent eth0\nlxc profile device set default eth0 nictype macvlan&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Another way to do this is by adding another bridge which is bridged onto your main NIC. You&apos;ll need to edit your &lt;code&gt;/etc/network/interfaces.d/eth0.cfg&lt;/code&gt; to look like this:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;# The primary network interface\nauto eth0\niface eth0 inet manual # note the manual here&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And then add a bridge by creating &lt;code&gt;/etc/network/interfaces.d/containerbr.cfg&lt;/code&gt; with the contents:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;auto containerbr\niface containerbr inet dhcp\n  bridge_ports eth0&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Finally, you&apos;ll need to change the default lxd profile to use your new bridge:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;lxc profile device set default eth0 parent containerbr&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Restart the &lt;code&gt;networking&lt;/code&gt; service (which if you do it over ssh, may boot you :), and away you go. If you want some of your containers to be on one bridge, and some on the other, you can use different profiles to accomplish this.&lt;/p&gt;&quot;</description><category>containers</category><category>lxd</category><category>networking</category><pubDate>Tue,  5 Apr 2016 00:00:00 UTC</pubDate></item><item><title>linux.conf.au 2016 talk</title><link>http://tycho.ws/blog/2016/02/linux-conf-au.html</link><description>&quot;&lt;p&gt;Last week I did this ridiculous thing where I flew around the world in the easterly direction, giving talks at FOSDEM and linux.conf.au. The linux.conf.au staff always do a great job of making talk videos, and this year was no exception.&lt;/p&gt;\n&lt;p&gt;My talk was on LXD and live migration, a brief history of both as well as a status update and some discussion of future work on both. There were also lots of questions in this talk, so there&apos;s a lot of discussion of basic migration questions and inner workings.&lt;/p&gt;\n&lt;p&gt;Unforatunately, I can&apos;t embed it here, so I&apos;ll give you a link instead. Also, keep in mind at the time I was giving this talk I had been up for ~40 hours, so I forgot some English words here and there :)&lt;/p&gt;\n&lt;p&gt;&lt;a href=&apos;https://www.youtube.com/watch?v=ol85OJxDaHc&apos;&gt;https://www.youtube.com/watch?v=ol85OJxDaHc&lt;/a&gt;&lt;/p&gt;&quot;</description><category>talks</category><category>containers</category><category>migration</category><category>lxd</category><pubDate>Mon,  8 Feb 2016 00:00:00 UTC</pubDate></item><item><title>Using the LXD API from Python</title><link>http://tycho.ws/blog/2015/05/lxd-python.html</link><description>&quot;&lt;p&gt;After our recent splash at ODS in Vancouver, it seems that there is a lot of interest in writing some python code to drive LXD to do various things. The first option is to use &lt;a href=&apos;https://github.com/lxc/pylxd&apos;&gt;pylxd&lt;/a&gt;, a project maintained by a friend of mine at Canonical named Chuck Short. However, the primary client of this is OpenStack, and thus it is python2. We also don&apos;t want to add a lot of dependencies in this module, so we&apos;re using raw python urllib and friends, which as you know can sometimes be...painful :)&lt;/p&gt;\n&lt;p&gt;Another option would be to use python&apos;s awesome &lt;a href=&apos;http://python-requests.org&apos;&gt;requests&lt;/a&gt; module, which is considerably more user friendly. However, since LXD uses client certificates, it can be a bit challenging to get the basic bits going. Here&apos;s a small program that just does some GETs to the API, to see how it might work:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;import os.path\n\nimport requests\n\nconf_dir = os.path.expanduser(&apos;~/.config/lxc&apos;)\ncrt = os.path.join(conf_dir, &apos;client.crt&apos;)\nkey = os.path.join(conf_dir, &apos;client.key&apos;)\n\nprint(requests.get(&apos;https://127.0.0.1:8443/1.0&apos;, verify=False, cert=(crt, key)).text)&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which gives me (piped through jq for sanity):&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ python3 lxd.py | jq .\n{\n  \&quot;type\&quot;: \&quot;sync\&quot;,\n  \&quot;status\&quot;: \&quot;Success\&quot;,\n  \&quot;status_code\&quot;: 200,\n  \&quot;metadata\&quot;: {\n    \&quot;api_compat\&quot;: 1,\n    \&quot;auth\&quot;: \&quot;trusted\&quot;,\n    \&quot;config\&quot;: {\n      \&quot;trust-password\&quot;: true\n    },\n    \&quot;environment\&quot;: {\n      \&quot;backing_fs\&quot;: \&quot;ext4\&quot;,\n      \&quot;driver\&quot;: \&quot;lxc\&quot;,\n      \&quot;kernel_version\&quot;: \&quot;3.19.0-15-generic\&quot;,\n      \&quot;lxc_version\&quot;: \&quot;1.1.2\&quot;,\n      \&quot;lxd_version\&quot;: \&quot;0.9\&quot;\n    }\n  }\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It just piggy backs on the lxc client generated certificates for now, but it would be great to have some python code that could generate those as well!&lt;/p&gt;\n&lt;p&gt;Another bit I should point out for people is lxd&apos;s &lt;code&gt;--debug&lt;/code&gt; flag, which prints out every request it receives and response that it sends. I found this useful while developing the default &lt;code&gt;lxc&lt;/code&gt; client, and it will probably be useful to those of you out there who are developing your own clients.&lt;/p&gt;\n&lt;p&gt;Happy hacking!&lt;/p&gt;&quot;</description><category>linux</category><category>lxd</category><category>containers</category><category>python</category><pubDate>Tue, 26 May 2015 00:00:00 UTC</pubDate></item><item><title>Live Migration in LXD</title><link>http://tycho.ws/blog/2015/04/lxd-live-migration.html</link><description>&quot;&lt;p&gt;There has been a lot of interest on the various mailing lists as well as internally at Canonical about the state of migration in LXD, so I thought I&apos;d write a bit about the current state of affairs.&lt;/p&gt;\n&lt;p&gt;Migration in LXD today passes the \&quot;Doom demo\&quot; test, i.e. it works well enough to reproduce the &lt;a href=&apos;https://www.youtube.com/watch?v=a9T2gcnQg2k&amp;t=1189&apos;&gt;LXD announcement demo&lt;/a&gt; under certain conditions, which I&apos;ll cover below. There is still a lot of ongoing work to make &lt;a href=&apos;http://criu.org&apos;&gt;CRIU&lt;/a&gt; (the underlying migration technology) work with all these configurations, so support will eventually arrive for everything. For now, though, you&apos;ll need to use the configuration I describe below.&lt;/p&gt;\n&lt;p&gt;First, I should note that things currently won&apos;t work on a systemd host. Since systemd re-mounts the rootfs as &lt;code&gt;MS_SHARED&lt;/code&gt;, lots of things automatically become shared mounts, which confuses CRIU. There are &lt;a href=&apos;http://lists.openvz.org/pipermail/criu/2015-April/019585.html&apos;&gt;several&lt;/a&gt; &lt;a href=&apos;http://lists.openvz.org/pipermail/criu/2015-March/019299.html&apos;&gt;mailing list&lt;/a&gt; &lt;a href=&apos;http://lists.openvz.org/pipermail/criu/2015-April/019652.html&apos;&gt;threads&lt;/a&gt; about ongoing work with respect to shared mounts in CRIU and I expect something to be merged that will resolve the situation shortly, but for now your host machine needs to be a non-systemd host (i.e. trusty or utopic will work just fine, but not vivid).&lt;/p&gt;\n&lt;p&gt;You&apos;ll need to install the daily versions of liblxc and lxd from their respective PPAs on each host:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo apt-add-repository -y ppa:ubuntu-lxc/daily\nsudo apt-add-repository -y ppa:ubuntu-lxc/lxd-git-master\nsudo apt-get update\nsudo apt-get install lxd&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Also, you&apos;ll need to uninstall &lt;code&gt;lxcfs&lt;/code&gt; on both hosts:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo apt-get remove lxcfs&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;liblxc&lt;/code&gt; currently doesn&apos;t support migrating the mount configuration that lxcfs uses, although there is &lt;a href=&apos;http://lists.openvz.org/pipermail/criu/2015-March/019530.html&apos;&gt;some work&lt;/a&gt; on that as well. The overmounting issue has been fixed in lxcfs, so I expect to land some patches in liblxc soon that will make lxcfs work.&lt;/p&gt;\n&lt;p&gt;Next, you&apos;ll want to set a password for your new lxd instance:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;lxc config set password foo&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You need some images in &lt;code&gt;lxd&lt;/code&gt;, which can be acquired easily enough by lxd-images (of course, this only needs to be done on the source host of the migration):&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;lxd-images import lxc ubuntu trusty amd64 --alias ubuntu&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You&apos;ll also need to set a few configuration items in lxd. First, the container needs to be privileged, although there is &lt;a href=&apos;http://lists.openvz.org/pipermail/criu/2015-February/018934.html&apos;&gt;yet more&lt;/a&gt; ongoing work to remove this restriction. There are also a few things that CRIU does not support, so we need to set our container config to respect those as well. You can do all of this using lxd&apos;s profiles mechanism, that is:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;lxc config profile create migratable\nlxc config profile edit migratable&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And paste the following content in instead of what&apos;s there:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;name: migratable\nconfig:\n  raw.lxc: |\n    lxc.console = none\n    lxc.cgroup.devices.deny = c 5:1 rwm\n    lxc.start.auto =\n    lxc.start.auto = proc:mixed sys:mixed\n  security.privileged: \&quot;true\&quot;\ndevices:\n  eth0:\n    nictype: bridged\n    parent: lxcbr0\n    type: nic&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Finally, launch your contianer:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;lxc launch ubuntu migratee -p migratable&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Finally, add both of your LXDs as non unix-socket remotes (&lt;a href=&apos;https://github.com/lxc/lxd/blob/master/lxc/copy.go#L79&apos;&gt;required&lt;/a&gt; for now, but not forever):&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;lxc remote add lxd thishost:8443   # don&apos;t use localhost here\nlxc remote add lxd2 otherhost:8443 # use a publicly addressable name&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Profiles used by a particular container need to be present on both the source of the migration and the sink, so we should copy the profile to the sink as well:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;lxc config profile copy migratable lxd2:&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And now, you&apos;re ready for the magic!&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;lxc start migratee\nlxc move lxd:migratee lxd2:migratee&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;With luck, you&apos;ll have migrated the container to &lt;code&gt;lxd2&lt;/code&gt;. Of course, things don&apos;t always go right the first time. The full log file for the migration attempts should be available in &lt;code&gt;/var/log/lxd/migratee/migration_{dump|restore}_&amp;lt;timestamp&amp;gt;.log&lt;/code&gt;, on the respective host where the dump or restore took place. If you aren&apos;t successful in migrating things (or parsing the dump/restore log), feel free to mail &lt;a href=&apos;https://lists.linuxcontainers.org/listinfo/lxc-users&apos;&gt;lxc-users&lt;/a&gt;, and I can help you debug what went wrong.&lt;/p&gt;\n&lt;p&gt;Happy hacking!&lt;/p&gt;&quot;</description><category>linux</category><category>lxd</category><category>criu</category><category>migration</category><category>containers</category><pubDate>Mon,  6 Apr 2015 00:00:00 UTC</pubDate></item><item><title>setproctitle() in Linux</title><link>http://tycho.ws/blog/2015/02/setproctitle.html</link><description>&quot;&lt;p&gt;While working on LXD, one of the things I occasionally do is submit patches to LXC (e.g. the migration work or other things). In particular, the name of the LXC monitor process (the process that&apos;s the parent of init) is &lt;code&gt;fork()ed&lt;/code&gt; in the C API call, so whatever the name of the binary that ran the API call (in our case, LXD) is the name of the parent. This could be slightly confusing (especially in the case where LXD dies but a process that looks like it is named LXD lives on). Should be easy enough to fix, right? Lots of *nixes seem to have a &lt;code&gt;setproctitle()&lt;/code&gt; function to correct this, so we&apos;ll just call that!&lt;/p&gt;\n&lt;p&gt;And lo, there is &lt;code&gt;prctl()&lt;/code&gt; which has a &lt;code&gt;PR_SET_NAME&lt;/code&gt; mode that we can use. Done! Except from one small caveat from the man page:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The name can be up to 16 bytes long, and should be null-terminated if it contains fewer bytes.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Yes, you read that, 16 bytes; not useful for a lot of process names, especially something which would be ideal for LXC:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;[lxc monitor] /var/lib/lxc container-name&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Ok, so how hard can it be to write our own? If you look around on the internet, a lot of people suggest something like &lt;code&gt;strcpy(argv[0], \&quot;my-proc-name\&quot;)&lt;/code&gt;. That works, but what happens if your process name is longer than the original? You smash the stack! Try &lt;code&gt;cat /proc/&amp;lt;pid&amp;gt;/environ&lt;/code&gt; on the program below:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;string.h&amp;gt;\n#include &amp;lt;stdio.h&amp;gt;\n\nint main(int argc, char* argv[]) {\n    char buf[1024];\n    memset(buf, &apos;0&apos;, sizeof(buf));\n    buf[1023] = 0;\n    strncpy(argv[0], buf, sizeof(buf));\n    sleep(10000);\n    return 0;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If your process name is longer than the original environment, you overwrite something else potentially more useful, which could cause all sorts of nastiness, especially as something that runs as root.&lt;/p&gt;\n&lt;p&gt;The thing is, the environment isn&apos;t necessarily all that useful; it doesn&apos;t indicate the current environment, just the initial environment. So we could use that space for the process name, as long as the kernel knew the environment wasn&apos;t valid any more. &lt;code&gt;prctl()&lt;/code&gt; to the rescue again, we can pass it &lt;code&gt;PR_SET_MM&lt;/code&gt; and &lt;code&gt;PR_SET_MM_ENV_{START|END}&lt;/code&gt; to update these locations.&lt;/p&gt;\n&lt;p&gt;Problem solved! Except that we want to do this from &lt;code&gt;liblxc.so&lt;/code&gt;, which has no concept of argv. &lt;code&gt;prctl()&lt;/code&gt; has no &lt;code&gt;PR_GET_MM&lt;/code&gt; calls, so we can&apos;t just go the other way with it. We could invent some ugly API where you have to pass it in, but that would require users to either set their argv pointers up front, or carry it around until they needed it, or something similarly ugly. Instead, we steal an idea from the CRIU codebase: we look in &lt;code&gt;/proc/&amp;lt;pid&amp;gt;/stat&lt;/code&gt;. This file has (in columns 48-51, if your kernel is new enough) exactly the arguments you want from &lt;code&gt;PR_GET_MM_*&lt;/code&gt;! Thus, we can use this file to find out inside of liblxc where is safe to put the new proctitle.&lt;/p&gt;\n&lt;p&gt;Putting it all together, &lt;a href=&apos;https://github.com/lxc/lxc/blob/master/src/lxc/utils.c#L1572&apos;&gt;liblxc now has an implementation of &lt;code&gt;setproctitle()&lt;/code&gt;&lt;/a&gt; that will overwrite your initial environment (but is careful not to overwrite anything else), which can be used to set process titles longer than 16 bytes. Enjoy!&lt;/p&gt;&quot;</description><category>linux</category><category>lxd</category><category>C</category><pubDate>Mon,  9 Feb 2015 00:00:00 UTC</pubDate></item><item><title>lxd and Doom migration demo</title><link>http://tycho.ws/blog/2014/11/lxd.html</link><description>&quot;&lt;p&gt;Last week at the Openstack Developer Summit I gave a live demo of &lt;a href=&apos;https://www.youtube.com/watch?v=a9T2gcnQg2k&amp;t=1189&apos;&gt;migrating a linux container running doom&lt;/a&gt;, which generated quite a lot of excitement! Several people asked me for steps on reproducing the demo, which I have &lt;a href=&apos;https://github.com/tych0/presentations/blob/master/ods2014.md&apos;&gt;just posted&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;I am one of Canonical&apos;s developers working on lxd, and I will be focused on bringing migration and other features into it. I&apos;m very excited about the opportunity to work on this project! Stay tuned!&lt;/p&gt;&quot;</description><category>lxd</category><category>containers</category><category>doom</category><category>migration</category><pubDate>Mon, 10 Nov 2014 00:00:00 UTC</pubDate></item><item><title>Qtile&apos;s crazy 0.9.0 changes have landed</title><link>http://tycho.ws/blog/2014/09/qtile.html</link><description>&quot;&lt;p&gt;We have re-written a lot of the underlying code that powers qtile, in order to support python2/3, pypi, as well as getting rid of several memory leaks. This work is now done and on the development branch, see the &lt;a href=&apos;https://groups.google.com/forum/#!topic/qtile-dev/vHsY8l8ya2A&apos;&gt;mailing list announcement&lt;/a&gt; for more info.&lt;/p&gt;&quot;</description><category>qtile</category><category>python</category><pubDate>Sat, 13 Sep 2014 00:00:00 UTC</pubDate></item><item><title>Live Migration of Linux Containers</title><link>http://tycho.ws/blog/2014/09/container-migration.html</link><description>&quot;&lt;p&gt;Recently, I&apos;ve been playing around with &lt;a href=&apos;http://criu.org&apos;&gt;checkpoint and restore&lt;/a&gt; of &lt;a href=&apos;http://linuxcontainers.org&apos;&gt;Linux containers&lt;/a&gt;. One of the obvious applications is checkpointing on one host and restoring on another (i.e. live migration). Live migration has all sorts of interesting applications, so it is nice to know that at least a proof of concept of it works today.&lt;/p&gt;\n&lt;p&gt;Anyway, onto the interesting bits! The first thing I did was create two vms, and install criu&apos;s and lxc&apos;s development versions on both hosts:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:ubuntu-lxc/daily\nsudo apt-get update\nsudo apt-get install lxc\n\nsudo apt-get install build-essential protobuf-c-compiler\ngit clone https://github.com/xemul/criu &amp;&amp; cd criu &amp;&amp; sudo make install&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then, I created a container:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo lxc-create -t ubuntu -n u1 -- -r trusty -a amd64&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Since the work on container checkpoint/restore is so young, not all container configurations are supported. In particular, I had to add the following to my config:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; EOF | sudo tee -a /var/lib/lxc/u1/config\n# hax for criu\nlxc.console = none\nlxc.tty = 0\nlxc.cgroup.devices.deny = c 5:1 rwm\nEOF&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Finally, although the lxc-checkpoint tool allows us to checkpoint and restore containers, there is no support for migration directly today. There are several tools in the works for this, but for now we can just use a cheesy shell script:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;cat &amp;gt; migrate &amp;lt;&amp;lt;EOF\n#!/bin/sh\nset -e\n\nusage() {\n  echo $0 container user@host.to.migrate.to\n  exit 1\n}\n\nif [ \&quot;$(id -u)\&quot; != \&quot;0\&quot; ]; then\n  echo \&quot;ERROR: Must run as root.\&quot;\n  usage\nfi\n\nif [ \&quot;$#\&quot; != \&quot;2\&quot; ]; then\n  echo \&quot;Bad number of args.\&quot;\n  usage\nfi\n\nname=$1\nhost=$2\n\ncheckpoint_dir=/tmp/checkpoint\n\ndo_rsync() {\n  rsync -aAXHltzh --progress --numeric-ids --devices --rsync-path=\&quot;sudo rsync\&quot; $1 $host:$1\n}\n\n# we assume the same lxcpath on both hosts, that is bad.\nLXCPATH=$(lxc-config lxc.lxcpath)\n\nlxc-checkpoint -n $name -D $checkpoint_dir -s -v\n\ndo_rsync $LXCPATH/$name/\ndo_rsync $checkpoint_dir/\n\nssh $host \&quot;sudo lxc-checkpoint -r -n $name -D $checkpoint_dir -v\&quot;\nssh $host \&quot;sudo lxc-wait -n u1 -s RUNNING\&quot;\nEOF\nchmod +x migrate&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now, for the magic show! I&apos;ve set up the container I created above to be a web server running micro-httpd that serves an incredibly important message:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ ssh ubuntu@$(sudo lxc-info -n u1 -H -i)\nubuntu@u1:~$ sudo apt-get install micro-httpd\nubuntu@u1:~$ echo \&quot;Meshuggah is the best metal band.\&quot; | sudo tee /var/www/index.html\nubuntu@u1:~$ exit\n$ curl -s $(sudo lxc-info -n u1 -H -i)\nMeshuggah is the best metal band.&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Let&apos;s migrate!&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ sudo ./migrate u1 ubuntu@criu2.local\n  # lots of rsync output...\n$ ssh ubuntu@criu2.local &apos;curl -s $(sudo lxc-info -n u1 -H -i)&apos;\nMeshuggah is the best metal band.&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Of course, there are several caveats to this. You&apos;ve got to add the lines above to your config, which means you can&apos;t dump containers with ttys. Since containers have the hosts&apos;s fusectl bind mounted and fuse mounts aren&apos;t supported by criu, containers or hosts using fuse can&apos;t be dumped. You can&apos;t migrate unprivileged containers yet. There are probably others that I&apos;m forgetting, though list of troubleshoting steps is available at &lt;a href=&apos;http://criu.org/LXC#Troubleshooting&apos;&gt;criu.org/LXC#Troubleshooting&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;There is ongoing work in both CRIU and LXC to get rid of all the caveats above, so stay tuned!&lt;/p&gt;&quot;</description><category>linux</category><category>containers</category><category>migration</category><category>lxc</category><category>criu</category><pubDate>Wed,  8 Oct 2014 00:00:00 UTC</pubDate></item><item><title>Qtile 0.8.0 tagged!</title><link>http://tycho.ws/blog/2014/08/qtile.html</link><description>&quot;&lt;p&gt;I&apos;ve just tagged version 0.8.0 of Qtile! See the &lt;a href=&apos;https://github.com/tych0/qtile/blob/master/CHANGELOG&apos;&gt;changelog&lt;/a&gt; for full release details, and the &lt;a href=&apos;https://groups.google.com/forum/#!topic/qtile-dev/1-D3ULN2QWI&apos;&gt;release announcement&lt;/a&gt; for other detials. This release of Qtile also comes with a sleek &lt;a href=&apos;http://qtile.org&apos;&gt;new website&lt;/a&gt;, courtesy of &lt;a href=&apos;https://github.com/dmpayton&apos;&gt;Derek Payton&lt;/a&gt;.&lt;/p&gt;&quot;</description><category>qtile</category><category>python</category><pubDate>Mon, 18 Aug 2014 00:00:00 UTC</pubDate></item><item><title>xcffib 0.1.0 released!</title><link>http://tycho.ws/blog/2014/06/xcffib.html</link><description>&quot;&lt;p&gt;I&apos;m excited to announce today that I&apos;ve tagged the first release of &lt;a href=&apos;https://github.com/tych0/xcffib&apos;&gt;xcffib&lt;/a&gt;, v0.1.0. The testing of xcffib with qtile has been mostly successful, and I&apos;m comfortable now tagging a release. Special thanks to &lt;a href=&apos;https://github.com/flacjacket&apos;&gt;Sean Vig&lt;/a&gt; who has done a lot of work on the python3 side of xcffib. Happy hacking!&lt;/p&gt;&quot;</description><category>xcb</category><category>xcffib</category><category>python</category><pubDate>Sat, 12 Jul 2014 00:00:00 UTC</pubDate></item><item><title>CFFI-based Qtile!</title><link>http://tycho.ws/blog/2014/06/qtile-cffi.html</link><description>&quot;&lt;p&gt;For the past while I&apos;ve been working on a reimplementation of &lt;a href=&apos;https://pypi.python.org/pypi/xpyb/1.3.1&apos;&gt;xpyb&lt;/a&gt; in &lt;a href=&apos;https://cffi.readthedocs.org/en/release-0.8/&apos;&gt;cffi&lt;/a&gt;. There are several reasons to want to do this:&lt;/p&gt;\n&lt;h1&gt;. xpyb has at least &lt;a href=&apos;https://github.com/qtile/qtile/issues/395&apos;&gt;one more&lt;/a&gt; memory leak (but probably others)&lt;/h1&gt;\n&lt;h1&gt;. The xpyb upstream is inactive, and there is no sign of a python 3 port&lt;/h1&gt;\n&lt;h1&gt;. It would be uber cool to be able to run qtile in pypy.&lt;/h1&gt;\n&lt;p&gt;Using cffi soves 2 and 3 pretty easily, and I&apos;ve made sure that xcffib&apos;s test suite runs through valgrind with no definite leaks, hopefully mitigating 1. However, even if we have xcffib, there is still a lot of work that needed to happen to make qtile run on top of it. I&apos;m writing this post to announce that some of that work is done, and late last night I was able to boot qtile running on top of xffib! There are still lots of bugs, and lots of testing needs to be done, but we&apos;re most of the way there I think, and running qtile on python3 and pypy without memory leaks is no longer a pipe dream :-).&lt;/p&gt;\n&lt;p&gt;To install, you&apos;ll need:&lt;/p&gt;\n&lt;h1&gt;. &lt;code&gt;sudo apt-get install xcb-proto libpango1.0-dev libcairo2-dev&lt;/code&gt; (or whatever&lt;/h1&gt;\n&lt;p&gt;the equivalent packages are on your distro)&lt;/p&gt;\n&lt;h1&gt;. Follow the &lt;a href=&apos;https://github.com/tych0/xcffib/blob/master/.travis.yml#L17&apos;&gt;installation instructions&lt;/a&gt; for xcffib.&lt;/h1&gt;\n&lt;h1&gt;. Install the &lt;code&gt;xcffib&lt;/code&gt; branch of &lt;a href=&apos;https://github.com/tych0/cairocffi/tree/xcffib&apos;&gt;tych0/cairocffi&lt;/a&gt;&lt;/h1&gt;\n&lt;h1&gt;. Install the &lt;code&gt;cffi&lt;/code&gt; branch of &lt;a href=&apos;https://github.com/tych0/qtile/tree/cffi&apos;&gt;tych0/qtile&lt;/a&gt;&lt;/h1&gt;\n&lt;p&gt;I have not tried to test qtile on python 3 yet, so there may be some work that needs to be done to successfully run things on python 3. However, both xcffib and cairocffi run their test suites on python 3, and so the only work that needs to be done is probably in qtile, if any. pypy is another story however, as xcffib does not currently pass its test suite on pypy. I plan to fix that at some point, but I&apos;d like to get qtile running completely before that happens.&lt;/p&gt;\n&lt;p&gt;Finally, there are some bugs that manifest with qtile right now:&lt;/p&gt;\n&lt;h1&gt;. The systray doesn&apos;t work. This is probably due to a bug in the way xcffib&lt;/h1&gt;\n&lt;p&gt;unpacks ClientMessage events.&lt;/p&gt;\n&lt;h1&gt;. Most of the text-based widgets don&apos;t work. This is probably due to a bug in&lt;/h1&gt;\n&lt;p&gt;the pangocffi binding I wrote for qtile. I thing it is just an incompleteness, and I will try and fix it either today or tomorrow. Basic text widgets like the clock or the volume widget work just fine.&lt;/p&gt;\n&lt;h1&gt;. Lots of other things are probably broken :-). Bug reports welcome.&lt;/h1&gt;\n&lt;p&gt;Happy hacking!&lt;/p&gt;&quot;</description><category>qtile</category><category>python</category><pubDate>Sat, 21 Jun 2014 00:00:00 UTC</pubDate></item><item><title>Ubuntu 14.04 Trusty Tahr packages for Qtile</title><link>http://tycho.ws/blog/2014/03/qtile.html</link><description>&quot;&lt;p&gt;Just posting to let everyone know that I&apos;ve published packages for the latest Qtile release on Ubuntu 14.10. See the &lt;a href=&apos;https://groups.google.com/forum/#!topic/qtile-dev/FPCjTZmewqc&apos;&gt;mailing list announcement&lt;/a&gt; for more details. Additionally, we will be doing a 0.7 release shortly, so please let me know if there are any release blocking bugs!&lt;/p&gt;&quot;</description><category>qtile</category><category>python</category><category>ubuntu</category><pubDate>Sat, 29 Mar 2014 00:00:00 UTC</pubDate></item><item><title>Ubuntu 13.10 Saucy Salamander packages for Qtile</title><link>http://tycho.ws/blog/2013/09/qtile.html</link><description>&quot;&lt;p&gt;Just posting to let everyone know that I&apos;ve published packages for the latest Qtile release on Ubuntu 13.10. See the &lt;a href=&apos;https://groups.google.com/forum/#!topic/qtile-dev/UwO46FJe3T8&apos;&gt;mailing list announcement&lt;/a&gt; for more details.&lt;/p&gt;&quot;</description><category>qtile</category><category>python</category><category>ubuntu</category><pubDate>Sat,  7 Sep 2013 00:00:00 UTC</pubDate></item><item><title>Manage passwords without state</title><link>http://tycho.ws/blog/2013/09/password.html</link><description>&quot;&lt;p&gt;A few years ago I had a problem: I had a bunch of accounts that I accessed once a year when tax time came around, and I kept forgetting the passwords. Often I&apos;d try a few before locking myself out, and then I&apos;d have to spend an hour on the phone with customer service getting my account unlocked, which meant if I was doing my taxes on the last weekend possible, I wouldn&apos;t be able to complete them until the next business day. The obvious solution to this problem is to store the passwords in some kind of password manager -- lots of them exist for all kinds of platforms: phone, computer, browser, etc.&lt;/p&gt;\n&lt;p&gt;The problem with password manager is that they typically require some kind of state file. They store the mapping between site and cleartext password in some file, and then they decrypt it with some secret from you when you want to access it. Thus, you have to 1. trust the person who is doing the encrypting and decrypting that they are doing it correctly so that when your laptop gets stolen your passwords aren&apos;t leaked, and 2. you have to have &lt;em&gt;access&lt;/em&gt; to the machine that the passwords are stored on when you want to use them. If you&apos;ve left your laptop at home or you forgot to back up your password file when you got a new computer, you&apos;re SOL.&lt;/p&gt;\n&lt;p&gt;What&apos;s the solution? A password manager without state, of course! Since we&apos;re assuming the user can remember at least one pretty good password, we can use that as our \&quot;state\&quot;, so we end up with the algorithm as follows:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;hash = sha512(user_secret + \&quot;example.org\&quot;)\nbase64encode(hash)[:10]&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here, we&apos;re using the domain to salt the user secret so the generated passwords are different for each site. &lt;code&gt;sha512&lt;/code&gt; provides randomness, although we are only using the first 60 bits of the output here (10 base64 characters, each character encodes six bits of entropy), there are significantly more bits of entropy here than in your typical English character, making it a much stronger password. Further, the algorithm is very simple, and you could re-implement it on any computer that has your favorite programming language environment available. Thus, you can use it in a pinch, since all you need to remember are the algorithm and your &lt;code&gt;user_secret&lt;/code&gt;. I&apos;ve &lt;a href=&apos;https://github.com/tych0/password&apos;&gt;published&lt;/a&gt; a python script that implements this mechanism, so you don&apos;t even have to remember the algorithm&lt;/p&gt;&quot;</description><category>password</category><category>security</category><category>free code</category><category>python</category><pubDate>Fri,  6 Sep 2013 00:00:00 UTC</pubDate></item><item><title>Weechat with an alternative timezone</title><link>http://tycho.ws/blog/2013/06/weechat.html</link><description>&quot;&lt;p&gt;A common usecase (and one I was interested in) for weechat is to run it on a VPS in screen, so that you don&apos;t lose your IRC session when you turn off your computer. This all works well and good, except that all the timestamps for the messages will be in the server&apos;s local time, instead of your time. If you dig through the code, though, you find that weechat uses the &lt;code&gt;strftime()&lt;/code&gt; call, which respects the TZ environment variable. So, if your server is in a different time zone than you are, you can start weechat by:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;TZ=&apos;US/Central&apos; weechat-curses&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and all the timestamps it displays will be in &lt;code&gt;US/Central&lt;/code&gt; time.&lt;/p&gt;&quot;</description><category>weechat</category><category>irc</category><category>utilities</category><pubDate>Tue, 25 Jun 2013 00:00:00 UTC</pubDate></item><item><title>Qtile 0.6 released!</title><link>http://tycho.ws/blog/2013/05/qtile.html</link><description>&quot;&lt;p&gt;I have just tagged and released qtile 0.6! This release comes exactly 6 months after our last release (not intentionally, it just happened to work out that way). You can check out the &lt;a href=&apos;http://docs.qtile.org/en/latest/releases/0.6.html&apos;&gt;full release notes&lt;/a&gt; for a list of most of the changes.&lt;/p&gt;\n&lt;p&gt;I thought I&apos;d discuss a bit about the breaking config changes we made. A few of them were long standing TODOs in the code, but the major one (and the one that motivated cleaning up all the rest) was creating a new config module where all of the objects used in configuration live. The primary motivation for this change was to remove a lot of crazy hacks we had in the test system to get around circular imports, since the configuration objects and main manager were all in the same file. However, it also makes sense from a code organization standpoint, because manager.py was getting huge. I think user impact will be minimal, because configs can be updated with a simple regex. That said, I will only be updating the Ubuntu 13.04 packages, so as not to break configs for existing users on older packages with a simple dselect-upgrade.&lt;/p&gt;\n&lt;p&gt;As always, questions or comments are welcome on &lt;a href=&apos;https://groups.google.com/forum/?fromgroups#!forum/qtile-dev&apos;&gt;qtile-dev&lt;/a&gt;!&lt;/p&gt;&quot;</description><category>qtile</category><category>python</category><category>free code</category><pubDate>Sat, 11 May 2013 00:00:00 UTC</pubDate></item><item><title>Haggis, a static site generator</title><link>http://tycho.ws/blog/2013/03/haggis.html</link><description>&quot;&lt;p&gt;Woah! tycho.ws looks totally different. Recently, I switched from using my old custom blogging framework to a new static site generator that I wrote called &lt;a href=&apos;http://hackage.haskell.org/package/haggis&apos;&gt;haggis&lt;/a&gt;. Both &lt;a href=&apos;https://github.com/tych0/haggis&apos;&gt;haggis&lt;/a&gt; and the source code for &lt;a href=&apos;https://github.com/tych0/tycho.ws&apos;&gt;this blog&lt;/a&gt; are available, so you can check them out and perhaps build your own haggis-based blog if you want.&lt;/p&gt;\n&lt;p&gt;I did haggis as a static site generator mostly because I could. There&apos;s no inherent reason for blogs to re-compute their pages on every request, especially when there are very few comments on the blog (I think I&apos;ve got around 70 comments right now across all my posts). The comments support I wrote for this blog is in fact totally separate from haggis -- the templates have a form which does an AJAX post to a small script which basically dumps the result in a database (after sanatizing it, of course :-). Haggis needs to know nothing about the \&quot;dynamic\&quot; nature of the site. Then, the script simply re-invokes haggis, which regenerates the whole blog.&lt;/p&gt;\n&lt;p&gt;Now, if all of the sudden I write a super popular post, my blog (probably?) won&apos;t go down: the page is statically generated, so all the web server has to do is read it off the disk and dump it on to the wire. No sessions, no computation, no nothing. I&apos;m using apache because I&apos;m lazy and it&apos;s what I know how to set up, but if I really wanted to, I could use some other more performant web server for static files, thus increasing my capacity even more.&lt;/p&gt;\n&lt;p&gt;What happens, though, if lots of people start commenting all the time? Then I spawn off N processes, which could confuse the web server if they&apos;re all over-writing the files all the time. So, instead I check whether to re-generate the blog once a minute, and only do it if necessary (i.e. if there is a new comment). With this setup, hopefully I can handle a reasonably large load with very few resources. And, of course, I can edit my posts in vim using markdown, and manage the blog in git which were all requirements as well.&lt;/p&gt;\n&lt;p&gt;So, haggis probably performs much better than a GTFO-based (or any other dynamic framework based) blog does, but why not just turn GTFO into a static site generator? Well, the other reason for haggis is that I&apos;ve been interested in learning haskell for a while, and this was a perfect first project. Anyway, haggis should be reasonably stable at this point, although there&apos;s still lots of work left. Please report any bugs on the github page!&lt;/p&gt;&quot;</description><category>haskell</category><category>haggis</category><category>hquery</category><pubDate>Thu, 14 Mar 2013 00:00:00 UTC</pubDate></item><item><title>Hquery, an HTML5 tree rewriting tool</title><link>http://tycho.ws/blog/2013/01/hquery.html</link><description>&quot;&lt;p&gt;Recently I began rewriting the framework that powers this blog (&lt;a href=&apos;https://github.com/tych0/gtfo&apos;&gt;gtfo&lt;/a&gt;) in haskell. Among other things, I needed a good tree rewriting utility for processing templates and generating content. I&apos;ve been using &lt;a href=&apos;http://liftweb.net/&apos;&gt;Lift&lt;/a&gt; at work for a while now, so I built hquery, which is basically an implementation of Lift&apos;s &lt;a href=&apos;http://simply.liftweb.net/index-7.10.html&apos;&gt;CSS Selectors&lt;/a&gt; over &lt;a href=&apos;http://hackage.haskell.org/package/xmlhtml&apos;&gt;xmlhtml&lt;/a&gt; trees. You can see some examples of the kind of transformations it allows in &lt;a href=&apos;https://github.com/tych0/hquery#examples&apos;&gt;hquery&apos;s readme&lt;/a&gt;. Additionally, it is available from &lt;a href=&apos;http://hackage.haskell.org/package/hquery&apos;&gt;hackage&lt;/a&gt; via &lt;code&gt;cabal install hquery&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Feedback is welcome, as this is my first haskell API. Bug reports and patches are of course welcome too :-)&lt;/p&gt;&quot;</description><category>free code</category><category>haskell</category><category>html</category><pubDate>Tue, 29 Jan 2013 00:00:00 UTC</pubDate></item><item><title>Qtile 0.5 released!</title><link>http://tycho.ws/blog/2012/11/qtile05.html</link><description>&quot;&lt;p&gt;Hello! Today, I&apos;m proud to announce the release of &lt;a href=&apos;https://github.com/qtile/qtile/commit/dd52b52fb8713b5b983c1a034a67bfc6fa269573&apos;&gt;Qtile 0.5&lt;/a&gt;. A wildly incomplete changelog is available &lt;a href=&apos;http://docs.qtile.org/en/latest/releases/0.5.html&apos;&gt;here&lt;/a&gt;. Qtile 0.5 comes more than two years after the release of 0.4. There have been many major improvements and bugfixes by nearly 50 contributors. Many thanks to everyone who was involved, and long live tiling window managers!&lt;/p&gt;&quot;</description><category>free code</category><category>python</category><category>qtile</category><pubDate>Sun, 11 Nov 2012 00:00:00 UTC</pubDate></item><item><title>Qtile 0.5 packages for 12.10</title><link>http://tycho.ws/blog/2012/11/qtile05-packages.html</link><description>&quot;&lt;p&gt;Ahoy! I&apos;ve updated the packages in my Ubuntu 12.10 PPA to be version 0.5. Please let qtile-dev know if you have any problems!&lt;/p&gt;&quot;</description><category>free code</category><category>python</category><category>qtile</category><category>ppa</category><category>ubuntu</category><pubDate>Mon, 12 Nov 2012 00:00:00 UTC</pubDate></item><item><title>Qtile packages for Ubuntu 12.10 (Quantal Quetzal)</title><link>http://tycho.ws/blog/2012/10/qtile-packages.html</link><description>&quot;&lt;p&gt;Ahoy! I have put up new packages for qtile for 12.10, so I thought I&apos;d write a bit about what&apos;s actually in the packages. First, they&apos;re available via the standard:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo apt-add-repository ppa:tycho-s/ppa\nsudo apt-get update\nsudo apt-get install qtile&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;A few things to note about these packages. First: they now install a qtile.desktop file, so any compliant freedesktop.org login manager should see qtile as a login option. Note that this just invokes qtile directly with no arguments, so you&apos;ll have to put your configs in the standard location. If you want to run a custom &lt;code&gt;.xsession&lt;/code&gt;, you&apos;ll still need to set that up yourself.&lt;/p&gt;\n&lt;p&gt;Second, these packages no longer depend on xpyb-ng, but depend on xpyb (1.3.1) directly. I did this for a few reasons. I&apos;ve had several users report that 1.3.1 works directly for them (i.e. xpyb-ng is not actually required to run qtile). If there is no problem with using the stock implementation, I felt like we should switch to that. Naturally, if problems come up and we need to move back to our fork, I&apos;m happy to rebuild, however, I think that&apos;s unlikely.&lt;/p&gt;\n&lt;p&gt;Third, which hash are these packages based on? They&apos;re based on &lt;a href=&apos;https://github.com/qtile/qtile/commit/87dc6924cbeab92f2b48b05623e0de53efd68400&apos;&gt;87dc6924cb&lt;/a&gt;, which is on the development branch. I&apos;ve been running this code both at home and at work for several months now, as well as several other people. While there are still several bugs (patches welcome!), I feel that it&apos;s much more stable and user friendly than the master branch.&lt;/p&gt;\n&lt;p&gt;Fourth, based on some statistics that Launchpad provides, it looks like there were about 100 installs of the Ubuntu PPA. One or two of those were probably my test VMs, but that means there were a fair number of other people who checked qtile out. Very cool!&lt;/p&gt;\n&lt;p&gt;Feel free to e-mail me or &lt;a href=&apos;http://groups.google.com/group/qtile-dev&apos;&gt;qtile-dev&lt;/a&gt; with any feedback! (Unfortunately, I&apos;ve been inadvertently banned from qtile-dev somehow. Still waiting on a resolution to that, so if you find a bug with the packages, go ahead and just file it on the github tracker and I&apos;ll fix it ASAP.)&lt;/p&gt;&quot;</description><category>free code</category><category>python</category><category>qtile</category><category>ppa</category><category>ubuntu</category><pubDate>Fri, 19 Oct 2012 00:00:00 UTC</pubDate></item><item><title>Qtile packages for Ubuntu 11.10 (Oneiric Ocelot)</title><link>http://tycho.ws/blog/2012/02/qtile-packages.html</link><description>&quot;&lt;p&gt;By not-so-popular demand (:-), I have built some packages for qtile and its dependencies for 11.10. You can now install my branch of qtile via:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo apt-add-repository ppa:tycho-s/ppa\nsudo apt-get update\nsudo apt-get install qtile&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Feel free to e-mail me or &lt;a href=&apos;http://groups.google.com/group/qtile-dev&apos;&gt;qtile-dev&lt;/a&gt; with any feedback!&lt;/p&gt;&quot;</description><category>free code</category><category>python</category><category>qtile</category><category>ppa</category><pubDate>Sun, 26 Feb 2012 00:00:00 UTC</pubDate></item><item><title>Viridian/Ampache local control</title><link>http://tycho.ws/blog/2012/01/vif.html</link><description>&quot;&lt;p&gt;Recently at work I&apos;ve been using &lt;a href=&apos;http://www.daveeddy.com/projects/launchpad/viridian-ampache-front-end/&apos;&gt;Viridan&lt;/a&gt; to listen to music at work. It has its warts, but generally works pretty well. There&apos;s even an XMLRPC server built in, so you can control it remotely. However, there&apos;s not a huge number of clients out there, so I wrote my own little script so that I could start and stop it from a Qtile keybinding, and I thought I&apos;d &lt;a href=&apos;blog/2012/01/vif.py&apos;&gt;put it up&lt;/a&gt; here for anyone else who is interested. Here&apos;s an example session:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;smitten:~$ ./vif.py \n./vif.py [rpc_call(s)]\n   availible methods are:\n     get_current_song\n     get_state\n     get_volume\n     next\n     play_pause\n     prev\n     set_volume\n     volume_down\n     volume_up\nsmitten:~$ ./vif.py get_current_song\n{&apos;artist_name&apos;: &apos;Meshuggah&apos;,&apos;song_title&apos;: &apos;Stengah&apos;, ...}\nsmitten:~$ ./vif.py next\nTrue&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Hopefully someone else finds it useful :-)&lt;/p&gt;&quot;</description><category>free code</category><category>python</category><category>ampache</category><pubDate>Mon, 23 Jan 2012 00:00:00 UTC</pubDate></item><item><title>Photos from my Colorado adventure</title><link>http://tycho.ws/blog/2012/01/skiing.html</link><description>&quot;&lt;p&gt;Hello! I just completed another successful two and a half weeks touring the Colorado mountains. Although the snow was not great (Winter Park only has around a 15 inch base, and over half the mountain was closed), I still had a good time! Rather than do a lot of aggressive skiing (the conditions would have made aggressive skiing fairly dangerous), I tried a bunch of new things instead! The most interesting new thing was probably the &lt;a href=&apos;http://www.ski-bike.org/faq.html&apos;&gt;ski bike&lt;/a&gt;, and I am now a licensed snow cyclist! My dad and I both took lots of pictures, and he&apos;s posted both the ones from &lt;a href=&apos;http://dave.tycho.ws/PEHut12/&apos;&gt;his camera&lt;/a&gt; and &lt;a href=&apos;http://dave.tycho.ws/PEHut12T/&apos;&gt;my camera&lt;/a&gt; on his web page.&lt;/p&gt;\n&lt;p&gt;I did three summits during the trip, two of Mt. Charles which is roughly 12,050 feet, and one of Mt. Prospect which is roughly 11,700 feet. I took a panorama (which I&apos;ve yet to stitch together) of the view on Mt. Prospect, and my dad took one of Mt. Charles, so eventually when we get those stitched together, I&apos;ll post them as well. Anyway, if you&apos;re heading out west, here&apos;s to hoping you have more snow than we did! Even though the backcountry was bare in spots, we still had a lot of fun goofing around (you might notice some defilement of a USGS marker in the photos ;-).&lt;/p&gt;&quot;</description><category>colorado</category><category>skiing</category><category>photos</category><pubDate>Wed, 11 Jan 2012 00:00:00 UTC</pubDate></item><item><title>Installing Qtile on Ubuntu 11.10 (Oneiric Ocelot)</title><link>http://tycho.ws/blog/2012/01/install-qtile.html</link><description>&quot;&lt;p&gt;Recently, there has been some discussion on &lt;a href=&apos;http://groups.google.com/group/qtile-dev&apos;&gt;qtile-dev&lt;/a&gt; about installing the latest and greatest version of qtile. Unfortunately, the install process has historically been a journey into dependency hell, since distributions didn&apos;t have the latest versions of some libraries required by qtile. The good news is that this has mostly been fixed (although very few documents anywhere state this), so it&apos;s hard to know what to install by hand and what you can use packages for.&lt;/p&gt;\n&lt;p&gt;To complicate matters more, there are several versions of xpyb floating around, none of which have working build systems! If you knew enough about pkg-config and weren&apos;t afraid of manually installing files, you could get everything to work, but it did bar the \&quot;normal user\&quot; from installing qtile. Hopefully this blog post will clarify a few things.&lt;/p&gt;\n&lt;p&gt;First, what dependencies do you need to install? Contrary to what the docs say, in 11.10 (and presumably later versions of Ubuntu), you don&apos;t need to build your own cairo or xcb. You can simply:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo apt-get install xcb-proto libxcb1-dev python-xcbgen\nlibcairo2-dev&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You will have to build three things by hand: &lt;code&gt;xpyb&lt;/code&gt;, &lt;code&gt;py2cairo&lt;/code&gt;, and &lt;code&gt;qtile&lt;/code&gt; itself. The other day I sat down and fixed the build system for &lt;code&gt;xpyb&lt;/code&gt;, so you should be able to just:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git clone git://github.com/tych0/xpyb-ng.git\ncd xpyb-ng\nsudo python setup.py install&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;After that, you&apos;ll need to install &lt;code&gt;py2cairo&lt;/code&gt;. The &lt;code&gt;waf&lt;/code&gt; based build doesn&apos;t appear to detect xpyb correctly, so you&apos;ll need to go the autoconf route. Even with autoconf, the build system is slightly broken, so you&apos;ll need to be explicit about what directories to look in for &lt;code&gt;xpyb.h&lt;/code&gt;. If you used the above build of xpyb, you can:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git clone git://git.cairographics.org/git/py2cairo\ncd py2cairo\nCFLAGS=-I/usr/local/include/python2.7/xpyb ./configure\nsudo make install&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then, you can clone your favorite qtile repo and everything should Just Work! If you want to clone my copy of qtile (which includes several bug fixes and enhancements):&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git clone https://github.com/tych0/qtile\ncd qtile\nsudo python setup.py install&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you have any questions or problems, feel free to mail qtile-dev or me directly. I am going to try and package qtile and put it in a PPA, but I doubt I will get to that for another few weeks. This should help anyone who is interested enough to build it in the meantime, though!&lt;/p&gt;&quot;</description><category>free code</category><category>python</category><category>qtile</category><pubDate>Thu, 26 Jan 2012 00:00:00 UTC</pubDate></item><item><title>Unifying Logitech Devices on Linux</title><link>http://tycho.ws/blog/2011/12/logitech-unifying-receiver.html</link><description>&quot;&lt;p&gt;I was recently given a &lt;a href=&apos;http://www.amazon.com/Logitech-Wireless-Illuminated-Keyboard-K800/dp/B003VAGXWK/&apos;&gt;Logitech K800 keyboard&lt;/a&gt; and a &lt;a href=&apos;http://www.amazon.com/Logitech-Wireless-Performance-Mouse-Mac/dp/B002HWRJBM&apos;&gt;Logitech Performance Mouse MX&lt;/a&gt;, both of which are great devices. I picked them because wireless-ness is useful for ergonomic reasons, and they have rechargeable batteries, and you can attach them both to the same USB input, so you have fewer cables lying around.&lt;/p&gt;\n&lt;p&gt;Naturally, though, when I unboxed them I found out that you can only unify them to the same receiver with Windows-only software. There are a number of other features that are only usable with the Windows-only software, but I figured there would be a hardware sync process. Unfortunately, there&apos;s not a Logitech supported one.&lt;/p&gt;\n&lt;p&gt;There is, however, a &lt;a href=&apos;http://groups.google.com/group/linux.kernel/msg/36c53d79832fc3f5&apos;&gt;community developed one&lt;/a&gt;! There&apos;s a short C program with a bunch of magic numbers which send commands to the device and cause it to unify with a new device. Unfortunately, the program comes with no directions, so I thought I&apos;d post about how to do it. First, put the program in &lt;code&gt;pairing_tool.c&lt;/code&gt;, as suggested in the post. Then, compile it with:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;gcc -o pairing_tool pairing_tool.c&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To run it, we need to figure out where the Logitech unifying receiver is. The program wants the hidraw device corresponding to the unifying receiver. To find this out, you can look in &lt;code&gt;/sys/class/hidraw/hidraw*/device/uevent&lt;/code&gt;. In my case, the device is &lt;code&gt;hidraw2&lt;/code&gt;, and the output looks like this:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;smitten:~$ cat /sys/class/hidraw/hidraw2/device/uevent \nDRIVER=generic-usb\nHID_ID=0003:0000046D:0000C52B\nHID_NAME=Logitech USB Receiver\nHID_PHYS=usb-0000:00:1a.0-1.4/input2\nHID_UNIQ=\nMODALIAS=hid:b0003v0000046Dp0000C52B&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So, we can now unify the devices with the following command:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo ./pairing_tool /dev/hidraw2&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And then power on your device as the tool tells you to. I think there&apos;s some timeout on this, because the first time I did it I waited a few minutes and then powered on the device, and it didn&apos;t work. So, have your device ready and do it seconds after you run the pairing tool, and it should all work fine. HTH!&lt;/p&gt;&quot;</description><category>bugfix</category><pubDate>Mon, 12 Dec 2011 00:00:00 UTC</pubDate></item><item><title>Python &quot;binding&quot; for Ampache</title><link>http://tycho.ws/blog/2011/12/ampyche.html</link><description>&quot;&lt;p&gt;Ahoy!&lt;/p&gt;\n&lt;p&gt;Just writing a quick post to pimp my new &lt;a href=&apos;http://ampache.org/&apos;&gt;Ampache&lt;/a&gt; \&quot;bindings\&quot;, which are called &lt;a href=&apos;https://github.com/tych0/ampyche&apos;&gt;ampyche&lt;/a&gt;, naturally ;-). I slapped them together one afternoon mostly to get an understanding of the Ampache API, so that&apos;s why I used my native language. I have no specific plans for any python applications using them, but I&apos;m interested in improving the stability of Android-based Ampache clients, as well as adding support for Ampache to Clementine, so I thought this would be a good place to start.&lt;/p&gt;\n&lt;p&gt;In any case, I hope someone finds them useful! Happy hacking!&lt;/p&gt;&quot;</description><category>python</category><category>ampache</category><category>free code</category><pubDate>Mon, 19 Dec 2011 00:00:00 UTC</pubDate></item><item><title>Mutt Sidebar Configuration</title><link>http://tycho.ws/blog/2011/10/mutt.html</link><description>&quot;&lt;p&gt;I am a &lt;a href=&apos;http://www.mutt.org&apos;&gt;mutt&lt;/a&gt; user (in fact, I&apos;m a &lt;a href=&apos;http://www.lunar-linux.org/index.php?option=com_content&amp;task=view&amp;id=44&apos;&gt;mutt-sidebar&lt;/a&gt; user). That means several things, one of which is that I spend a nonzero amount of time configuring my e-mail client to behave as I want it to. I am also a &lt;a href=&apos;http://www.vim.org&apos;&gt;vim&lt;/a&gt; user, and in the spirit of loving vim, I set out on an adventure to make everything look and feel like vim. A natural thing to want to do is be able to navigate the sidebar (i.e. the folder list) with &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt; keys as one does in vim. Reasonable attempts at this fail for various reasons, and I hope this post will explain why and also how to do what you want.&lt;/p&gt;\n&lt;p&gt;First, a natural thing to want to do is to bind sidebar navigation to &lt;code&gt;&amp;lt;ctrl&amp;gt;+j&lt;/code&gt; and &lt;code&gt;&amp;lt;ctrl&amp;gt;+k&lt;/code&gt;, since the &lt;code&gt;&amp;lt;ctrl&amp;gt;&lt;/code&gt; binding indicates somehow that the navigation is \&quot;slightly different\&quot;, and therefore is a good mnemonic for a \&quot;slightly different\&quot; kind of up and down movement. To do this, you could put something like:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;bind index,pager \\ck sidebar-prev\nbind index,pager \\cj sidebar-next&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;at the end of your &lt;code&gt;~/.muttrc&lt;/code&gt;. However, this has an unexpected result: moving up and down in the menu works just fine, but now pressing &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; also moves you down in the sidebar, instead of opening the highlighted message (its default) or whatever else you had it set to.&lt;/p&gt;\n&lt;p&gt;The problem is that &lt;code&gt;&amp;lt;ctrl&amp;gt;+j&lt;/code&gt; and &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; are actually the same character. That is, when you press &lt;code&gt;&amp;lt;ctrl&amp;gt;+j&lt;/code&gt; the terminal interprets it and sends an ASCII 10 (the &lt;code&gt;LF&lt;/code&gt; character), which is the same thing that &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; sends. In fact &lt;code&gt;&amp;lt;ctrl&amp;gt;+*&lt;/code&gt; (where &lt;code&gt;*&lt;/code&gt; is any character a-z) is bound to some control code (it&apos;s just that most of them are unused in modern applications, e.g. &lt;code&gt;&amp;lt;ctrl&amp;gt;+i&lt;/code&gt; is an alias for tab). Unfortunately that means we can&apos;t bind &lt;code&gt;&amp;lt;ctrl&amp;gt;+j&lt;/code&gt; and &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; to different things in mutt, since they&apos;re actually the same character.&lt;/p&gt;\n&lt;p&gt;So what&apos;s the workaround? Well, I decided that &lt;code&gt;&amp;lt;alt&amp;gt;&lt;/code&gt; is just as reasonable as &lt;code&gt;&amp;lt;ctrl&amp;gt;&lt;/code&gt;. Running &lt;code&gt;:exec what-key&lt;/code&gt; told me that &lt;code&gt;\\252&lt;/code&gt; (i.e. octal 252) is &lt;code&gt;&amp;lt;alt&amp;gt;+j&lt;/code&gt;, so I can add the following lines to &lt;code&gt;~/.muttrc&lt;/code&gt;:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;bind index,pager \\253 sidebar-prev\nbind index,pager \\252 sidebar-next&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;but it didn&apos;t work! Mutt Well, it might work for some people, depending on their terminal configurations. According to the &lt;a href=&apos;http://rute.2038bug.com/node5.html.gz#SECTION00560000000000000000&apos;&gt;Rute User&apos;s tutorial and Exposition&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The alt modifier (i.e. Alt-?) is in fact a short way of pressing and releasing Esc before entering the key combination; hence Esc then f is the same as Alt-f--UNIX is different from other operating systems in this use of Esc.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;So what&apos;s the issue? Well, some terminals do this by default, and some don&apos;t. In xterm, the default is not to convert &lt;code&gt;&amp;lt;alt&amp;gt;&lt;/code&gt; characters into the escape sequences mutt expects. However, by putting&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;xterm*metaSendsEscape: true&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;in your &lt;code&gt;~/.Xresources&lt;/code&gt; and running &lt;code&gt;xrdb ~/.Xresources&lt;/code&gt; and restarting xterm, it /will/ interpret &lt;code&gt;&amp;lt;alt&amp;gt;&lt;/code&gt; keypresses correctly, and your &lt;code&gt;&amp;lt;alt&amp;gt;+j&lt;/code&gt; keybindings will work.&lt;/p&gt;&quot;</description><category>ncurses</category><category>mutt</category><pubDate>Wed, 26 Oct 2011 00:00:00 UTC</pubDate></item><item><title>Google Voice ncurses interface</title><link>http://tycho.ws/blog/2011/06/gvchat.html</link><description>&quot;&lt;p&gt;For a while I have been using a Google Voice number as my primary texting number since it doesn&apos;t cost any money and has the additional benefit that when I&apos;m at a computer, I can type text messages on a regular keyboard instead of on my tiny phone keyboard. This is all well and good, except I don&apos;t particularly care for the web interface; not because it&apos;s bad, but simply because it requires you to have a web browser open.&lt;/p&gt;\n&lt;p&gt;To solve this, I wrote an ncurses based \&quot;chat\&quot; client, &lt;a href=&apos;https://github.com/tych0/gvchat&apos;&gt;gvchat&lt;/a&gt;. It provides and instant messaging interface for the most recent text message your GV account has received. When someone new texts you, it seamlessly switches to that new thread. At this point there is no way to initiate new texts, but I plan on growing the feature set in the coming months. However, for now it fits my needs so I thought I&apos;d put it up for other people in the same boat.&lt;/p&gt;\n&lt;p&gt;Additionally, the client has a class &apos;Chat&apos;, which implements a crude ncurses based chat interface. As this improves, my hope is to add an XMPP backend for it as well. Any ncurses tips and tricks (or pointers to libraries which already have this functionality and are built on top of ncurses) are much appreciated!!&lt;/p&gt;&quot;</description><category>python</category><category>ncurses</category><category>sms</category><pubDate>Tue, 14 Jun 2011 00:00:00 UTC</pubDate></item><item><title>A Tiling Window Manger</title><link>http://tycho.ws/blog/2011/05/qtile.html</link><description>&quot;&lt;p&gt;Ahoy! At the recommendation of one of my friends, I&apos;ve recently begun using a tiling window manger. Although he recommended &lt;a href=&apos;http://xmonad.org&apos;&gt;xmonad&lt;/a&gt;, I decided to instead to go with a different project, &lt;a href=&apos;http://qtile.org&apos;&gt;qtile&lt;/a&gt;. I got myself a &lt;a href=&apos;http://github.com/tych0&apos;&gt;github&lt;/a&gt; account, since that is the primary avenue for qtile development. This means you can run the same WM code as I do :-). (I also posted the code for the framework that powers this blog, something I&apos;ve been meaning to do for a while but have not gotten around to.)&lt;/p&gt;\n&lt;p&gt;I wrote a widget for displaying the currently playing track from your favorite player which implements &lt;a href=&apos;http://xmms2.org/wiki/MPRIS&apos;&gt;MPRIS&lt;/a&gt;, and I would be interested in any feedback other qtile users have, so feel free to send me or qtile-dev e-mail if you play with it! The widget can be found in both my fork of qtile and in the main fork. It depends on python-dbus, things like Ubuntu&apos;s update-manager do too, so it&apos;s probably installed for most users. To use it, you can simply put&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;widget.Mpris(objname=&apos;org.mpris.awesome_mpris_player&apos;)&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;in your qtile &lt;code&gt;config.py&lt;/code&gt;. &lt;code&gt;objname&lt;/code&gt; should be whatever the name of your MPRIS player is. You can figure out what this is by running &lt;code&gt;dbus-notify&lt;/code&gt; and starting your player, and see what name it requests when it issues &lt;code&gt;RequestName&lt;/code&gt;. For example, Clementine&apos;s is &lt;code&gt;org.mpris.clementine&lt;/code&gt; (and is also the default).&lt;/p&gt;\n&lt;p&gt;Happy hacking!&lt;/p&gt;&quot;</description><category>wm</category><category>qtile</category><category>python</category><pubDate>Fri, 27 May 2011 00:00:00 UTC</pubDate></item><item><title>Rendering your current Clementine track in Conky</title><link>http://tycho.ws/blog/2010/10/conky-clementine.html</link><description>&quot;&lt;p&gt;I&apos;ve been using &lt;a href=&apos;http://www.clementine-player.org/&apos;&gt;Clementine&lt;/a&gt; as a replacement for Amarok for the last few months (it&apos;s fairly feature complete, and you don&apos;t have to have all of KDE loaded into memory, so it is actually fast). As I also use Conky, it&apos;s only natural to want the currently playing track to be rendered in Conky. This isn&apos;t too hard, since Clementine exposes this information via dbus. You can see code to do this below:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;#!/bin/bash\nTRACK=`qdbus org.mpris.clementine /TrackList \\\norg.freedesktop.MediaPlayer.GetCurrentTrack`\nqdbus org.mpris.clementine /TrackList \\\norg.freedesktop.MediaPlayer.GetMetadata $TRACK \\\n| sort -r | egrep \&quot;^(title:|artist:)\&quot; | sed -e \&quot;s/^.*: //g\&quot; \\\n| sed -e &apos;:a;N;$!ba;s/\\n/ - /g&apos; | head -c 36&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I put this in a script called &lt;code&gt;nowplaying&lt;/code&gt;, and when run, it gives me output in &lt;code&gt;Track name - Artist&lt;/code&gt; format. I cut off the output after 36 characters because that&apos;s about the size of my Conky window, and songs with longer names will cause Conky to automatically resize its window, which I think is distracting. You can chop the last bit off if you don&apos;t want this. Also, although I generally prefer &lt;code&gt;Artist - Track Name&lt;/code&gt; notation, I can usually tell who the artist is, so I listed the track name first in case the combination was over my 36 character limit. You can switch it back to &lt;code&gt;Artist - Track name&lt;/code&gt; by removing the &lt;code&gt;-r&lt;/code&gt; flag from the sort command above.&lt;/p&gt;\n&lt;p&gt;Now, to get this information into Conky, add a line to your &lt;code&gt;~/.conkyrc&lt;/code&gt; that looks something like this:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;Now playing: ${execi 10 ~/config/bin/nowplaying}&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Every 10 seconds, this will ping Clementine and ask it what is playing. If nothing is playing (or clementine is not running), this will simply render the empty string.&lt;/p&gt;&quot;</description><category>conky</category><category>clementine</category><category>script</category><pubDate>Sat, 23 Oct 2010 00:00:00 UTC</pubDate></item><item><title>Bug in GTFO</title><link>http://tycho.ws/blog/2010/09/race.html</link><description>&quot;&lt;p&gt;Uh oh! If you&apos;ve been browsing this site for the last few days, you&apos;ve probably noticed some strange behavior. For some reason I&apos;m getting a lot more hits than I was when I originally designed the framework, and it revealed a bug (a &lt;a href=&apos;http://en.wikipedia.org/wiki/Race_condition&apos;&gt;race condition&lt;/a&gt;, if you&apos;re interested). Or at least, I think that was the bug. I&apos;m not totally convinced that&apos;s what it was, but that&apos;s my educated guess.&lt;/p&gt;\n&lt;p&gt;Anyway, I believe I&apos;ve fixed the bug, and all should be happy now. Life is busy, busy, busy now that classes have started. I&apos;m planning to do a century ride at the end of September, though, so I need to find time to keep riding :-)&lt;/p&gt;&quot;</description><category>gtfo</category><category>bug</category><category>meta</category><pubDate>Sun, 12 Sep 2010 00:00:00 UTC</pubDate></item><item><title>The UK</title><link>http://tycho.ws/blog/2010/08/uk.html</link><description>&quot;&lt;p&gt;Recently (July 9-23), I spent some time in the UK. I&apos;ve been a bit busy since then, and have not had time to write up my activities and post them. Anyway, I&apos;ve got some time now, so I&apos;m posting now :-). The primary reason I went to the UK was for the &lt;a href=&apos;http://floc-conference.org&apos;&gt;FLoC &apos;10&lt;/a&gt; conference (which was held in Edinburgh, Scotland), where I had a paper in &lt;a href=&apos;http://en.wikipedia.org/wiki/Computer_Aided_Verification&apos;&gt;CAV&lt;/a&gt;. There is more info (including the paper) on my &lt;a href=&apos;http://pages.cs.wisc.edu/~tycho/&apos;&gt;school home page&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;We spent a few days wandering around London, which is quite the tourist trap. I went and saw &lt;a href=&apos;http://en.wikipedia.org/wiki/Abbey_Road_%28album%29&apos;&gt;Abbey Road&lt;/a&gt; and walked across the zebra crossing, we went and saw the Eye and Tower of London, we saw the Sherlock Holmes museum, we went to Greenwich to sand on the prime meridian, and Windsor Castle. The world cup final (Spain vs. Holland) occurred, and we watched it in an English pub. Naturally, there were many other visits to pubs too... I had to get the full experience, you know ;-).&lt;/p&gt;\n&lt;p&gt;After London, we went to Edinburgh for the conference. We didn&apos;t do much sight seeing while the conference was in session, but we did eat quite a lot of food, including &lt;a href=&apos;http://en.wikipedia.org/wiki/Haggis&apos;&gt;haggis&lt;/a&gt; at the fancy conference dinner where we got to here a bagpiper recite the &lt;a href=&apos;http://en.wikisource.org/wiki/Address_to_a_Haggis&apos;&gt;Address to a Haggis&lt;/a&gt; before our meal.&lt;/p&gt;\n&lt;p&gt;After the conference, we spent a day touring Glasgow, a day touring Edinburgh, and a day touring the Scottish country side (including a boat ride across Loch Ness, but no Nessie sighting). It was a fun trip!&lt;/p&gt;\n&lt;p&gt;Aditya and I took lots and lots of &lt;a href=&apos;http://images.tycho.ws/uk&apos;&gt;photos&lt;/a&gt;, so enjoy! I stitched some panoramas together, and some of them turned out pretty good. Note that there are no thumbnails because the images are &lt;em&gt;huge&lt;/em&gt;, and the thumbnail generation program crashes on them. You&apos;ll just have to download them (but do it on a computer with lots of RAM, as the images are ~25 MB each). Enjoy!&lt;/p&gt;&quot;</description><category>travel</category><category>photos</category><category>panorama</category><pubDate>Sun, 15 Aug 2010 00:00:00 UTC</pubDate></item><item><title>Primus sucks!</title><link>http://tycho.ws/blog/2010/08/primus.html</link><description>&quot;&lt;p&gt;Last night I went to my first (but hopefully not last!) &lt;a href=&apos;http://en.wikipedia.org/wiki/Primus_%28band%29&apos;&gt;Primus&lt;/a&gt; show. The show itself was fantastic, Les Claypool is a fantastically weird and equally awesome bassist. I learned that Les is writing a new album with Primus to be released in 2011, which is awesome (there&apos;s a Meshuggah album due out then too, it&apos;s going to be a great year for music).&lt;/p&gt;\n&lt;p&gt;For those who are curious about the title: Primus&apos; slogan is \&quot;Primus Sucks\&quot;. It came to be when everyone kept commenting on how incredibly talented Les (and indeed, all the band members were): \&quot;hey, you&apos;re really good!\&quot;. Eventually, Les started responding with \&quot;No, we suck\&quot;, and their slogan was born. So, if you&apos;re a true Primus fan, you say \&quot;Hey man, Primus sucks!\&quot;. It was chanted during the encore at the show last night.&lt;/p&gt;\n&lt;p&gt;Anyway, I get to cross another band off of my list. Woohoo!&lt;/p&gt;&quot;</description><category>music</category><category>primus</category><pubDate>Mon,  9 Aug 2010 00:00:00 UTC</pubDate></item><item><title>Gmail, Conky, and libnotify</title><link>http://tycho.ws/blog/2010/08/gmail-notify.html</link><description>&quot;&lt;p&gt;Several years ago I discovered a fantastic system monitor named &lt;a href=&apos;http://conky.sourceforge.net&apos;&gt;conky&lt;/a&gt;. Over the years I&apos;ve been tweaking my .conkyrc and it has really evolved into a little command center all on it&apos;s own. However, I read my e-mail through a mutt, and thus to check it I have to open mutt and look and see if I have any new mail. This is often obnoxious, because I&apos;ll either forget to check and miss something until later, or I&apos;ll check a lot and not get any e-mail. Today it occurred to me \&quot;hey, computers are good at repetitive tasks!\&quot;, so I decided to automatically check my e-mail and render the results in conky. I also have heard lots of noise about libnotify, and how wonderful it is, so I decided to use that as well. The result is a script which checks a user&apos;s Gmail (using a password stored in a keyring), updates conky, and shows a libnotify notification if necessary. It also supports querying of arbitrary Gmail labels, allowing you to display unread counts for other e-mail addresses you might possibly have mapped to your Gmail account.&lt;/p&gt;\n&lt;p&gt;You can get your own &lt;a href=&apos;http://files.tycho.ws/code/gmail_notifier/gmail_unread.py&apos;&gt;copy&lt;/a&gt; to play around with if you like. It&apos;s fairly well documented, but I&apos;ll answer any questions anyone has. The dependencies (at least on Ubuntu) are &lt;code&gt;python-notify python-keyring&lt;/code&gt; and your favorite of: &lt;code&gt;python-keyring-gnome&lt;/code&gt; or &lt;code&gt;python-keyring-kwallet&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;I&apos;ve released it under a &lt;a href=&apos;http://en.wikipedia.org/wiki/Beerware&apos;&gt;beerware&lt;/a&gt; style license, in hopes that someone, somewhere, might find it useful. Feedback is appreciated!&lt;/p&gt;&quot;</description><category>gmail</category><category>conky</category><category>libnotify</category><category>python</category><category>free code</category><pubDate>Sun,  1 Aug 2010 00:00:00 UTC</pubDate></item><item><title>Gmail Atom Feed Authentication</title><link>http://tycho.ws/blog/2010/08/gmail-auth.html</link><description>&quot;&lt;p&gt;Perhaps the most complicated part of the application in my &lt;a href=&apos;http://tycho.ws/blog/2010/08/gmail-notify&apos;&gt;recent post&lt;/a&gt; was the authentication with Gmail. Although my final method boils down to only a few lines of python, Google describes &lt;a href=&apos;http://code.google.com/apis/accounts/docs/AuthForInstalledApps.html&apos;&gt;several&lt;/a&gt; &lt;a href=&apos;http://code.google.com/apis/accounts/docs/OAuthForInstalledApps.html&apos;&gt;different&lt;/a&gt; &lt;a href=&apos;http://code.google.com/apis/accounts/docs/OpenID.html&apos;&gt;ways&lt;/a&gt; to authenticate (additionally, putting the username and password directly in the URL). I didn&apos;t like any of these options, as some seemed much too complicated for what I wanted to do, some didn&apos;t work, and some were too insecure. However, it turns out that the atom feed supports HTTP&apos;s &lt;a href=&apos;http://en.wikipedia.org/wiki/Basic_access_authentication#Example&apos;&gt;basic access authentication&lt;/a&gt;. In python, this is fairly easy to do:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ python\n&amp;gt;&amp;gt;&amp;gt; import urllib2, base64\n&amp;gt;&amp;gt;&amp;gt; username = \&quot;me@gmail.com\&quot;; password = \&quot;secret\&quot;\n&amp;gt;&amp;gt;&amp;gt; url = \&quot;https://mail.google.com/mail/feed/atom/\&quot;\n&amp;gt;&amp;gt;&amp;gt; req = urllib2.Request(url)\n&amp;gt;&amp;gt;&amp;gt; authstr = base64.encodestring(\&quot;%s:%s\&quot; % (username, password))[:-1]\n&amp;gt;&amp;gt;&amp;gt; req.add_header(\&quot;Authorization\&quot;, \&quot;Basic \&quot; + authstr)\n&amp;gt;&amp;gt;&amp;gt; urllib2.urlopen(req).read()&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that the above also works for Google apps users you just have to stick \&quot;/a/example.com\&quot; in the appropriate spot in the URL. Hopefully this will help out someone else who is hopelessly bashing Google&apos;s servers with failed login attempts ;-)&lt;/p&gt;&quot;</description><category>gmail</category><category>python</category><category>free code</category><pubDate>Tue,  3 Aug 2010 00:00:00 UTC</pubDate></item><item><title>The Tour de France!</title><link>http://tycho.ws/blog/2010/07/tourdefrance.html</link><description>&quot;&lt;p&gt;The Tour de France started today! As I write this the prologue is going on (although none of the big names have gone yet, so we don&apos;t know who will lead tomorrow). Google is offering team HTC-Columbia&apos;s stats realtime in the tour via an API, so I may play around with that a bit (or at least collect the data... I&apos;ve never looked at pro riders&apos; stats before).&lt;/p&gt;\n&lt;p&gt;They also have a good &lt;a href=&apos;http://sites.pressatgoogle.com/realtimetour/home/power-101&apos;&gt;explanation of power&lt;/a&gt;, and why it&apos;s an interesting metric. I really have no concept of what my power:weight ratio is (I&apos;ve never ridden a bike with a trustable power meter), but it would be interesting to see what my power:weight was versus a pro. Some day when I&apos;m rich I&apos;ll get a power meter :-)&lt;/p&gt;\n&lt;p&gt;Anyway, it&apos;s going to be an interesting tour. Will Vino ride for Contador? Will Basso win? Can Lance&apos;s monster of a team get a W? Who knows, but it&apos;ll be fun to watch over the next few weeks :)&lt;/p&gt;&quot;</description><category>cycling</category><category>tour</category><pubDate>Sat,  3 Jul 2010 00:00:00 UTC</pubDate></item><item><title>The spam continues</title><link>http://tycho.ws/blog/2010/07/captcha.html</link><description>&quot;&lt;p&gt;Unfortunately, the spam on my blog appears to have continued. Thus, I&apos;ve implemented an anti-spam procedure in GTFO: the dreaded &lt;a href=&apos;http://en.wikipedia.org/wiki/CAPTCHA&apos;&gt;CAPTCHA&lt;/a&gt;. In the spirit of the framework, though, I&apos;ve tried to make it pretty easy... all it requires is that you type the word &apos;orange&apos; in to the form. This wouldn&apos;t be enough to fool human attackers, but I believe there&apos;s a number of years left in AI/NLP research before my blog will start being spammed again ;-). Sorry for the inconvenience, but I don&apos;t like logging in every morning to delete the spam.&lt;/p&gt;\n&lt;p&gt;In other news, I&apos;m back from the UK. Lots of photos were taken (both by me and by others), and I&apos;m sure I&apos;ll have those up soon.&lt;/p&gt;&quot;</description><category>gtfo</category><category>meta</category><category>spam</category><pubDate>Mon, 26 Jul 2010 00:00:00 UTC</pubDate></item><item><title>Non-POD to variadic functions</title><link>http://tycho.ws/blog/2010/06/variadic.html</link><description>&quot;&lt;p&gt;Recently I ran into some strange behavior in gcc that caused some minor confusion for me for a few hours until I figured out exactly what was wrong. I&apos;m going to attempt to explain it here, so that maybe someone else will benefit from my lack of understanding about how computers work :-). The problem was exacerbated by the fact that I am compiling a system which has literally &lt;em&gt;thousands&lt;/em&gt; of compiler warnings, and without going through and fixing them, there&apos;s really no way to manually read them. Since gcc only warns (although I really think this should be an error), this is a miss-able thing that &lt;em&gt;will&lt;/em&gt; cause problems if it is ignored. Our working example will be the following code:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;\n\nclass Foo\n{\n  public:\n    Foo() {}\n};\n\nint main()\n{\n  printf(\&quot;%s\\n\&quot;, Foo());\n  return 0;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;First, some background. C++ has things which C compilers (and libraries) don&apos;t understand, and one of them happens to be non-POD. POD stands for Plain Old Data, and it is basically things without constructors, destructors and methods (in the above example, &lt;code&gt;Foo&lt;/code&gt; serves this purpose). &lt;code&gt;printf()&lt;/code&gt; is what&apos;s known as a variadic function (i.e. a function which can take a variable number of arguments). In C, these functions are written using the &lt;code&gt;stdargs.h&lt;/code&gt; header and associated macros. Naturally, the macros in &lt;code&gt;stdargs.h&lt;/code&gt; know nothing about non-POD, and thus it is not valid to pass non-POD to a variadic function. What gcc does when you do, though, is rather strange. Consider the following terminal output:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;tycho@mittens:~/playground$ g++ variadic.cpp -o variadic\nvariadic.cpp: In function &apos;int main()&apos;:\nvariadic.cpp:11: warning: cannot pass objects of non-POD type\n&apos;class Foo&apos; through &apos;...&apos;; call will abort at runtime\nvariadic.cpp:11: warning: format &apos;%s&apos; expects type &apos;char*&apos;, but\nargument 2 has type &apos;int&apos;\ntycho@mittens:~/playground$ ./variadic \nIllegal instruction&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;What&apos;s going on here? My first thought was that it was some 32/64-bit nuance that I didn&apos;t understand but it turns out that isn&apos;t the case. When gcc encounters a variadic function which has been passed non-POD, it generates a warning and a &lt;code&gt;ud2&lt;/code&gt; instruction in place of the call. If (like me) you&apos;re forced to ignore all compiler warnings due to the sheer number, you wouldn&apos;t see the above warning. Then when you run your binary, it crashes with SIGILL! Why does it crash? From the Intel x86 manual:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;[ud2] Generates an invalid opcode. This instruction is provided for software testing to explicitly generate an invalid opcode. The opcode for this instruction is reserved for this purpose. Other than raising the invalid opcode exception, this instruction is the same as the NOP instruction. This instruction&apos;s operation is the same in non-64-bit modes and 64-bit mode.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;So, the generated binary has a &lt;code&gt;ud2&lt;/code&gt; sitting in it, which guarantees that it will crash with a SIGILL. Why does gcc do this instead of aborting compilation? I have no idea, but it&apos;s good to know that this behavior exists so that if you come across it you don&apos;t have to spend several hours hunting down what&apos;s going on.&lt;/p&gt;\n&lt;p&gt;Lastly, I&apos;d like to make a plug for &lt;a href=&apos;http://www.hex-rays.com/idapro/&apos;&gt;IDAPro&lt;/a&gt;. I have used it fairly extensively while at UW, and it works very well. It handles large (300MB) binaries well (things are naturally slower, but it&apos;s not unbearable), and models the re-writing of static and dynamic linkers for a variety of formats very well. I used it to help me track down this bug.&lt;/p&gt;&quot;</description><category>gcc</category><category>cpp</category><pubDate>Fri, 18 Jun 2010 00:00:00 UTC</pubDate></item><item><title>Spam on my blog!</title><link>http://tycho.ws/blog/2010/06/spam.html</link><description>&quot;&lt;p&gt;In an interesting twist, you may have noticed that my blog received some spam posts the other day. This seems pretty amazing to me, since I wrote this page myself, and there is exactly one deployment of it (which is here). I can see writing spam bots for popular frameworks like Wordpress, Joomla, Drupal, etc. but this isn&apos;t exactly a popular framework ;-). The fact that I got spammed leads me to believe that spammers are applying some sort of machine learning techniques to figure out what looks like a comment form, and what doesn&apos;t. It never ceases to amaze me the lengths people will go to in order to spam.&lt;/p&gt;\n&lt;p&gt;How did I remove it? Well naturally I&apos;ve been too lazy to code an admin interface (and why would I? I write the blog posts in vi). So, I had to fire up the sqlite driver (I use a database to store the comments) and manually delete them myself. If this keeps occurring, I&apos;ll probably try to build in some sort of simple spam filtering AI or at least an interface which makes it easy to delete the spam.&lt;/p&gt;\n&lt;p&gt;Either way, I&apos;m flattered that people think my website is popular enough that they &lt;em&gt;have&lt;/em&gt; to post their spam links on it ;-)&lt;/p&gt;&quot;</description><category>spam</category><category>meta</category><pubDate>Mon, 28 Jun 2010 00:00:00 UTC</pubDate></item><item><title>First post to the blog!</title><link>http://tycho.ws/blog/2010/06/fp.html</link><description>&quot;&lt;p&gt;This my first post using the blog mechanism of the GTFO. Hopefully everything will work as advertised ;-).&lt;/p&gt;&quot;</description><category>meta</category><category>gtfo</category><pubDate>Wed,  2 Jun 2010 00:00:00 UTC</pubDate></item><item><title>Dane County Farmer&apos;s Market</title><link>http://tycho.ws/blog/2010/06/farmersmarket.html</link><description>&quot;&lt;p&gt;One of the things I like best about living in downtown Madison is the &lt;a href=&apos;http://www.dcfm.org/&apos;&gt;farmer&apos;s market&lt;/a&gt;. It&apos;s very handy to be able to up, walk a few blocks and get stuff for breakfast, and come home and cook it. If you&apos;re ever in town, I highly recommend dropping by! They have all kinds of things there including a multitude of Wisconsin cheese :-).&lt;/p&gt;&quot;</description><category>madison</category><category>food</category><pubDate>Sat, 19 Jun 2010 00:00:00 UTC</pubDate></item><item><title>First public deployment of GTFO!</title><link>http://tycho.ws/blog/2010/06/deploy.html</link><description>&quot;&lt;p&gt;Ahoy! This is the first public deployment of the new web framework \&quot;GTFO\&quot;. I&apos;ll explain the name, design rationale, and other such things in a later post (suffice it to say that this is the framework which stays the hell out of your way ;-). For now, I believe I&apos;ve got a reasonable stable and secure (i.e. protected against sql/html injection) version of it.&lt;/p&gt;\n&lt;p&gt;Of course with a new framework comes a new content format. This means I had to port all of my content from my old web page to this one. Although most of it was pretty scriptable, I&apos;ve scrapped a few old and unnecessary pages in favor of the new format. In the process, I likely broke a few things that I&apos;m unaware of. Thus, if you experience any broken links (or get any unexpected errors) /please/ send me an e-mail to let me know, so that I can fix them.&lt;/p&gt;\n&lt;p&gt;I&apos;m also interested in folks&apos; thoughts on the new layout. I&apos;m experimenting with a few different layouts, and any thoughts would be welcome. I enjoy the simplicity of this one, but I don&apos;t like the fact that it is a fixed width. Anyway, I&apos;ll probably try a few more layouts before I settle on the right one, so don&apos;t be surprised if you show up and everything looks totally different. There should be more new content soon too (where soon is as soon as I can get the energy up to write it ;-).&lt;/p&gt;\n&lt;p&gt;Lastly, I hope to have more features (e.g. photo galleries) integrated into the framework. I&apos;m developing it pretty actively right now, so it&apos;s likely that these things will happen in the near future. Please don&apos;t hesitate to suggest any features that you might enjoy using. I&apos;m eventually going to release the code under a BSD-style (or perhaps beerware?) license, although it&apos;s not clean enough for me to do that right now. If you&apos;re interested in trying out the code, though, shoot me an e-mail and I&apos;ll be happy to send it your way.&lt;/p&gt;&quot;</description><category>meta</category><category>gtfo</category><pubDate>Tue, 15 Jun 2010 00:00:00 UTC</pubDate></item><item><title>Cycling in Madison</title><link>http://tycho.ws/blog/2010/06/cycling.html</link><description>&quot;&lt;p&gt;Now that I have this fancy blog, I might as well use it :-).&lt;/p&gt;\n&lt;p&gt;For my birthday I was given a fancy bike computer (Garmin Edge 705, if you&apos;re interested). I take it on all of my rides, and record them. I publish the results on &lt;a href=&apos;http://www.runsaturday.com/people/tycho&apos;&gt;runsaturday.com&lt;/a&gt;, which is a pretty cool page for managing things like this. If you&apos;re interested in fitness at all, this site has a plethora of tools which will automatically analyze your fitness for you. It&apos;s very interesting!&lt;/p&gt;&quot;</description><category>cycling</category><category>madison</category><category>cool websites</category><pubDate>Wed, 16 Jun 2010 00:00:00 UTC</pubDate></item><item><title>Panoramic off of the capitol</title><link>http://tycho.ws/blog/2010/06/cappano.html</link><description>&quot;&lt;p&gt;This weekend I went up to the observatory deck on the capitol, which was the first time I&apos;d ever done that. I shot a panoramic with the camera on my phone. It&apos;s not a great camera, but the results turned out pretty well for a camera phone. If you&apos;re interested you can check out the &lt;a href=&apos;http://files.tycho.ws/cap_pano.png&apos;&gt;original&lt;/a&gt; and a &lt;a href=&apos;http://files.tycho.ws/cap_pano_cropped.png&apos;&gt;cropped version&lt;/a&gt; (warning: these images are &lt;em&gt;huge&lt;/em&gt; -- around 25 MB -- and will probably take a while to load). Enjoy!&lt;/p&gt;\n&lt;p&gt;Oh, and the software I used to stitch together the photos was &lt;a href=&apos;http://hugin.sourceforge.net&apos;&gt;hugin&lt;/a&gt;. Not exactly an intuitive interface, but it works pretty well, and it has more buttons and whistles than I could ever want. If you know something about photo stitching that I don&apos;t (which is highly likely), I&apos;m happy to furnish the originals for a better attempt.&lt;/p&gt;&quot;</description><category>madison</category><category>panorama</category><pubDate>Mon, 21 Jun 2010 00:00:00 UTC</pubDate></item></channel></rss>